{
  "tags": [
    {
      "name": "",
      "description": ""
    },
    {
      "name": "OAuth",
      "description": "<img src='https://img.shields.io/badge/Status-Production-green' /><P>OAuth 2.0 implementation endpoints.<br>The following are the available scopes for the respective endpoints:<ul><li><b>api/products</b>: access to products endpoints</li><li><b>api/orders</b>: access to orders endpoints</li><li><b>api/returns</b>: access to returns endpoints</li><li><b>api/parcels</b>: access to parcel endpoints</li><li><b>api/reports</b>: access to reports endpoints</li><li><b>api/webhooks</b>: access to webhooks endpoints</li><li><b>api/parcel-integration</b>: access to parcel integration endpoints</li></ul>"
    },
    {
      "name": "Products",
      "description": "<img src='https://img.shields.io/badge/Status-Production-green' /><P> The Products API allows you to create, retrieve and update products.<P>Product records are the primary entities for tracking physical product attributes, including inventory and dimensions. A product record represents a physical item in the Deliverr network. Product records with at least one barcode are required to be present before inbounding inventory.<P><BR><B>Dimensions</B><P>Product <b>weight</b> and <b>dimensions</b> attributes are vital values for proper billing and material handling. If these values are known with high confidence, they can be passed through when creating or updating Product records. However, once the dimensions have been verified, the Product record will show a <B>dimsLocked</B> value of <b>true</b>, and updates to <b>weight</b> or <b>dimensions</b> will no longer be accepted after that point. If dimensions are not provided when products are first received to the Deliverr network, they will be measured and updated as part of the inbounding process.</P><BR><B>Barcodes</B><P>In order to inbound inventory, globally (across all customers) unique product unit barcodes must be assigned and applied to incoming product individual units. Barcodes are maintained on a Product level with all other physical attributes and have the following constraints:<UL><LI>A current maximum of five unique barcodes can be assigned to a given Product<LI>Barcodes must be in a standard symbology (Code39, Code128, UPC/EAN/GTIN/ISBN)<LI>Acceptable data patterns are: FNSKU/ASIN, UPC/EAN/GTIN-14/ISBN, DELIVERR<LI>Barcodes must be identified by type when supplied<LI>Multiple customer accounts attempting to use the same barcode, such as UPC values, are assigned ownership on a first come, first served basis. Non-unique barcode values are detected and rejected during barcode creation. DSKU/FNSKU/ASIN barcodes are the only values naturally globally unique.<P></UL><P>Barcodes can be assigned and validated during Product creation or added via the Product API. Barcodes cannot be modified after creation."
    },
    {
      "name": "Bundles",
      "description": "<img src='https://img.shields.io/badge/Status-Production-green' /><P> The Bundles API allows you to create and retrieve bundles.<P>"
    },
    {
      "name": "Orders",
      "description": "<img src='https://img.shields.io/badge/Status-Production-green' /><P> The Orders API allows you to create orders, track order lifecycles and get current order status (including shipment information) for those orders."
    },
    {
      "name": "Returns",
      "description": "<img src='https://img.shields.io/badge/Status-Private Beta-orange' alt=\"Private Beta\"/><P>\n          The returns API allows you to do following:\n          <ol>\n              <li>Create return order</li>\n              <li>Get return order details</li>\n              <li>Cancel return order</li>\n          </ol> "
    },
    {
      "name": "Parcels",
      "description": "\n<img src='https://img.shields.io/badge/Status-Private Beta-orange' alt=\"Private Beta\"/>\n\nParcels is a new offering from Deliverr that allows merchants to affordably deliver across the US hassle-free.\n\nParcels is currently only available to select merchants.\n"
    },
    {
      "name": "Reports",
      "description": "<img src='https://img.shields.io/badge/Status-Production-green'><P> The Reports API allows you to generate new reports and download them as CSV files. Here is a complete list of available reports:\n\n  | Report Code                               | Report Name and Link                                                                                                                                                                              | startDate/endDate parameters used |\n  |-------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------|\n  | Claims-Claims_Submitted                   | <a href=\"https://support.deliverr.com/hc/en-us/articles/4409567424535-Claims-Claims-Submitted\" >Claims - Claims Submitted</a>                                                                     | YES                               |\n  | Inbounds-Packages                         | <a href=\"https://support.deliverr.com/hc/en-us/articles/1500008316362-Inbounds-Packages-Report\" >Inbounds - Packages Report</a>                                                                   | YES                               |\n  | Inbounds-Shipments                        | <a href=\"https://support.deliverr.com/hc/en-us/articles/1500008315782-Inbounds-Shipments-Report\" >Inbounds - Shipments Report</a>                                                                 | YES                               |\n  | Inbounds-Shipping_Plan_Reconciliation     | <a href=\"https://support.deliverr.com/hc/en-us/articles/4408237571095--Inbounds-Inventory-Shipping-Plan-Reconciliation-Report\" > Inbounds - Inventory / Shipping Plan Reconciliation Report</a>   | NO                                |\n  | Inbounds-Inventory_Reconciliation         | <a href=\"https://support.deliverr.com/hc/en-us/articles/4408237571095--Inbounds-Inventory-Shipping-Plan-Reconciliation-Report\" >  Inbounds - Inventory / Shipping Plan Reconciliation Report </a> | NO                                |\n  | Inventory-Levels_Today                    | <a href=\"https://support.deliverr.com/hc/en-us/articles/1500008318542-Inventory-Levels-Today-Report\" > Inventory - Levels Today Report </a>                                                       | NO                                |\n  | Inventory-Units_In_Long_Term_Storage      | <a href=\"https://support.deliverr.com/hc/en-us/articles/1500008733222-Inventory-Units-in-Long-Term-Storage-Report\" >Inventory - Units in Long Term Storage Report</a>                             | NO                                |\n  | Orders-All_Orders                         | <a href=\"https://support.deliverr.com/hc/en-us/articles/1500011593962-Orders-Orders-Report\" >Orders - Orders Report</a>                                                                           | YES                               |\n  | Orders-Shipments                          | <a href=\"https://support.deliverr.com/hc/en-us/articles/1500011618401-Orders-Shipments-Report\" >Orders - Shipments Report</a>                                                                     | YES                               |\n  | Products-All_SKUs_With_Alias_Counts       | <a href=\"https://support.deliverr.com/hc/en-us/articles/1500008751601-Products-All-SKUs-With-Alias-Counts-Report\" >Products - All SKUs With Alias Counts Report</a>                               | NO                                |\n  | Products-Available_SKUs_With_Alias_Counts | <a href=\"https://support.deliverr.com/hc/en-us/articles/1500008752801-Products-Available-SKUs-With-Alias-Counts-Report\" >Products - Available SKUs With Alias Counts Report</a>                   | NO                                |\n  | Products-Available_SKUs_With_No_Aliases   | <a href=\"https://support.deliverr.com/hc/en-us/articles/1500008752921-Products-Available-SKUs-With-No-Aliases-Report\" >Products - Available SKUs With No Aliases Report</a>                       | NO                                |\n  | Products-SKUs_With_Linked_Aliases         | <a href=\"https://support.deliverr.com/hc/en-us/articles/4413866128279-Products-SKUs-with-Linked-Aliases-Report\" >Products - SKUs with Linked Aliases Report</a>                                   | NO                                |\n  | Returns-All_Returns                       | <a href=\"https://support.deliverr.com/hc/en-us/articles/4415993499159-Returns-All-Returns\" >Returns - All Returns</a>                                                                             | YES                               |\n  | Returns-All_SKUs                          | <a href=\"https://support.deliverr.com/hc/en-us/articles/4415986009239-Returns-All-Return-Items-by-MSKU\" >Returns - All Return Items by MSKU</a>                                                   | YES                               |            |"
    },
    {
      "name": "Webhooks",
      "description": "<img src='https://img.shields.io/badge/Status-Public Beta-blue' alt=\"Public Beta\"/><P>The Webhooks API allows you to subscribe for updates to Deliverr events. Webhooks is in a beta state and may work differently in the future, and may not work at all until promoted to production"
    },
    {
      "name": "Parcel Integration",
      "description": "\n<img src='https://img.shields.io/badge/Status-Private Beta-orange' alt=\"Private Beta\"/>\n\nParcel Integration holds integration-specific endpoints for the Parcels product.\n"
    }
  ],
  "info": {
    "version": "1.0.0",
    "title": "Deliverr API",
    "x-logo": {
      "url": "/images/dlogo.jpg",
      "backgroundColor": "#FFFFFF",
      "altText": "Deliverr Inc. - http://www.deliverr.com/"
    },
    "description": "\n**Note:** As of February 24 2023, Deliverr is not accepting new API accounts. Existing integrations already using the Deliverr API in production may continue usage and development. \nAll other Deliverr accounts initiating Deliverr API requests will be denied access. A new Logistics API is being developed by Shopify and will be replacing the Deliverr API.\n\n# Getting Started\n\nTo start using the Deliverr API, you must have an active login account to the Deliverr web portal.\nTo inbound physical inventory, ship orders, process returns or parcel transactions, you'll also need to set up a billing account.\n\n## If you do not already have a Deliverr account\n1. Create an account for free at https://sellerportal.deliverr.com\n2. When you are asked to choose an integration, you can click <b>Skip</b> at the upper right corner\n3. Once you have logged in, you can start the OAuth process below\n\n## If you already have a Deliverr account\n1. You can access the Products, Webhooks and Reports API immediately regardless of billing status\n2. All other APIs available will require you to have set up billing with Deliverr\n3. The Returns, Parcel, and Parcel Integration APIs are only accessible to select merchants\n\n## Guides and examples\n\nPlease visit the <a href='https://support.deliverr.com/hc/en-us/sections/6332705638423-Deliverr-API'>Deliverr API Guide</a> to view steps and code examples.\n\n# Release Notes\n\nPlease refer to the following <a href='https://support.deliverr.com/hc/en-us/articles/9399822031383'>Deliverr API - Release Notes</a> help center article to view the most recent changes to Deliverr API.\n\n# Status Page\n\nYou can find information about the current status of the API endpoints at <a href='https://deliverrstatus.com/'>deliverrstatus.com</a>\n\n",
    "license": {
      "name": "ISC"
    },
    "contact": {
      "name": "Deliverr",
      "email": "support@deliverr.com"
    }
  },
  "x-tagGroups": [
    {
      "name": "Production",
      "tags": [
        "OAuth",
        "Reports",
        "Products",
        "Bundles",
        "Orders",
        "Webhooks"
      ]
    },
    {
      "name": "Beta",
      "tags": [
        "Parcels",
        "Inbounds",
        "Returns",
        "Parcel-Integration"
      ]
    }
  ],
  "paths": {
    "/bundles/v1/bundle/{bundleId}/link/{externalBundleId}": {
      "patch": {
        "operationId": "LinkAliasToBundle",
        "responses": {
          "200": {
            "description": "externalBundleId has been linked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBundleModelResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "No bundle found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "description": "Links an externalBundleId to an existing bundle.\nA bundle can only be linked to one externalBundleId.",
        "tags": [
          "Bundles"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/products"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "bundleId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/BundleIdType"
            }
          },
          {
            "in": "path",
            "name": "externalBundleId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalBundleIdType"
            }
          }
        ]
      }
    },
    "/bundles/v1/bundle/unlink/externalId/{externalBundleId}": {
      "patch": {
        "operationId": "UnlinkAliasFromBundles",
        "responses": {
          "204": {
            "description": "externalBundleId has been unlinked"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "No bundle found with the externalBundleId provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "description": "Unlinks an externalBundleId from any existing bundle it is currently associated with.",
        "tags": [
          "Bundles"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/products"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "externalBundleId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalBundleIdType"
            }
          }
        ]
      }
    },
    "/bundles/v1/bundle/externalId/{externalBundleId}": {
      "get": {
        "operationId": "GetBundleByExternalBundleId",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBundleModelResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "No bundle found with the externalBundleId provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "description": "Get bundle information for a bundle by the external bundle id assigned.",
        "tags": [
          "Bundles"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/products"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "externalBundleId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalBundleIdType"
            }
          }
        ]
      }
    },
    "/bundles/v1/bundle/{bundleId}": {
      "get": {
        "operationId": "GetBundle",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBundleModelResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "No bundle found with the bundleId provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "description": "Get bundle information for a bundle.",
        "tags": [
          "Bundles"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/products"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "bundleId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/BundleIdType"
            }
          }
        ]
      }
    },
    "/bundles/v1/bundle/{bundleId}/inventory": {
      "get": {
        "operationId": "GetBundleInventory",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBundleInventoryResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "No bundle found with the bundleId provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "description": "Get available inventory information for the bundle.",
        "tags": [
          "Bundles"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/products"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "bundleId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/BundleIdType"
            }
          }
        ]
      }
    },
    "/bundles/v1/bundle": {
      "post": {
        "operationId": "CreateBundle",
        "responses": {
          "202": {
            "description": "Bundle has been created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBundleModelResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "No bundle found with the bundleId provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "description": "Creates a new bundle.",
        "tags": [
          "Bundles"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/products"
            ]
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiBundleModel"
              }
            }
          }
        }
      }
    },
    "/oauth/v1/authorize": {
      "get": {
        "operationId": "AuthorizationRedirect",
        "responses": {
          "301": {
            "description": "Redirect"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          }
        },
        "description": "Authorization URL to initiate flow",
        "tags": [
          "OAuth"
        ],
        "security": [],
        "parameters": [
          {
            "description": "The URI to which the oauth flow should redirect after successful\nauthentication.",
            "in": "query",
            "name": "redirect_uri",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "list of scopes seperated by '+'. Possible values are:\napi/products, api/inbounds, api/orders, api/returns, api/parcels, api/reports, api/webhooks.",
            "in": "query",
            "name": "scopes",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/oauth/v1/token": {
      "post": {
        "operationId": "ExchangeToken",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          }
        },
        "description": "Exchange code for a refresh_token and use refresh_token to generate\naccess_tokens at this endpoint.",
        "tags": [
          "OAuth"
        ],
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequest"
              }
            }
          }
        }
      }
    },
    "/orders/v1/order": {
      "post": {
        "operationId": "CreateOrder",
        "responses": {
          "201": {
            "description": "Order successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderApiStatusModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadOrderRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "description": "Create an order to be fulfilled.\n<P><B>Shipment and Delivery SLAs</B>\nAll orders are assigned a shipping date based on when they were originally placed.\nAll orders are assigned a shipping SLA for expected shipment time and delivery time after being imported.\nTo meet buyer expectations it's vital that this reflects customer expectations when the order is placed.<P>\nThe logic of evaluating the provided field is:<P>\n<OL>\n<LI>If the <B>orderDeliveryTime</B> field is present and valid, the value will be set as the SLA time\n<LI>Otherwise, if the <B>deliveryDays</B> value is set and valid, that number of days will be added onto\nthe calculated shipment date to determine the delivery date.</LI>\n<LI>Otherwise if the <B>shipMethod</B> is present, it will be mapped to a calculated delivery speed,\nif unrecognized or invalid, the shipping delivery date will be set to 5 days after the shipment date</LI>\n</OL>",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/orders"
            ]
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "idempotency-key",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/IdempotencyHeaderType"
            }
          },
          {
            "description": "if this header is set to \"true\" the request will be treated as a mock request.\nNote that if the shipMethod field is passed in for a mock order, it will be translated to a orderDeliveryTime\nof 2 days from now.",
            "in": "header",
            "name": "x-deliverr-mock-request",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderApiCreateRequest"
              }
            }
          }
        }
      }
    },
    "/orders/v1/order/{orderId}": {
      "get": {
        "operationId": "GetOrder",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderApiStatusModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "description": "Get order information for an order created via the \"Create order\"\nendpoint. If the order has been shipped, the response will contain\nshipping information.",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/orders"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrderIdType"
            }
          },
          {
            "description": "if this header is set to \"true\" the request will be\ntreated as a mock request.",
            "in": "header",
            "name": "x-deliverr-mock-request",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/orders/v1/order/{orderId}/retry": {
      "post": {
        "operationId": "RetryOrder",
        "responses": {
          "200": {
            "description": "Order retry successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderApiStatusModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Order access forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "422": {
            "description": "Order is in an invalid state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "description": "Retries processing of a fulfillment order.",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/orders"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrderIdType"
            }
          }
        ]
      }
    },
    "/orders/v1/order/externalId/{externalOrderId}": {
      "get": {
        "operationId": "GetOrderByExternalId",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderApiStatusModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "description": "Get order information for an order created via the \"Create order\"\nendpoint, using the external order ID given during order creation.\nIf the order has been shipped, the response will contain shipping\ninformation.",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/orders"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "externalOrderId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalOrderIdType"
            }
          },
          {
            "description": "if this header is set to \"true\" the request will be\ntreated as a mock request.",
            "in": "header",
            "name": "x-deliverr-mock-request",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/orders/v1/order/{orderId}/cancel": {
      "post": {
        "operationId": "CancelOrder",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        },
        "description": "Cancel an order that was created via the \"Create Order\" endpoint.\nIf an order has already been processed and shipped, the order cannot\nbe cancelled.",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/orders"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrderIdType"
            }
          },
          {
            "description": "if this header is set to \"true\" the request will be\ntreated as a mock request.",
            "in": "header",
            "name": "x-deliverr-mock-request",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ]
      }
    },
    "/parcel-integration/v1/job": {
      "post": {
        "operationId": "CreateLabelGenerationJob",
        "responses": {
          "201": {
            "description": "Label generation job successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LabelGenerationJobResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        },
        "description": "Initiate a label generation process.",
        "tags": [
          "Parcel-Integration"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/parcel-integration"
            ]
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LabelGenerationJobRequest"
              }
            }
          }
        }
      }
    },
    "/parcels/v1/parcel/quote": {
      "post": {
        "operationId": "GetQuote",
        "responses": {
          "200": {
            "description": "Successfully created quote",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "description": "Create a quote for a label purchase without actually purchasing a label.",
        "tags": [
          "Parcels"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/parcels"
            ]
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteCreateRequest"
              }
            }
          }
        }
      }
    },
    "/parcels/v1/parcel": {
      "post": {
        "operationId": "CreateParcel",
        "responses": {
          "200": {
            "description": "Successful purchase",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParcelCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadParcelRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParcelUnprocessableEntityError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "description": "Create a parcel and purchase a label for that parcel.",
        "tags": [
          "Parcels"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/parcels"
            ]
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParcelCreateRequest"
              }
            }
          }
        }
      }
    },
    "/parcels/v1/parcel/{parcelId}": {
      "get": {
        "operationId": "GetParcel",
        "responses": {
          "200": {
            "description": "Contains the information for the parcel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParcelGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "description": "Fetch the parcel with the specified ID.",
        "tags": [
          "Parcels"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/parcels"
            ]
          }
        ],
        "parameters": [
          {
            "description": "Unique ID used to track the parcel, returned after acquiring a\npurchase label.",
            "in": "path",
            "name": "parcelId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/parcels/v1/parcel/{parcelId}/tracking": {
      "get": {
        "operationId": "GetParcelTracking",
        "responses": {
          "200": {
            "description": "Contains the tracking information for the parcel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParcelTrackingGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "description": "Fetch the tracking information for the parcel with the specified ID.",
        "tags": [
          "Parcels"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/parcels"
            ]
          }
        ],
        "parameters": [
          {
            "description": "Unique ID used to track the parcel, returned after acquiring a\npurchase label.",
            "in": "path",
            "name": "parcelId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/parcels/v1/trackingUrl/{parcelId}": {
      "get": {
        "operationId": "GetTrackingUrl",
        "responses": {
          "200": {
            "description": "Contains the tracking URL for the parcel",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "description": "Fetch the tracking URL for the specified ID.",
        "tags": [
          "Parcels"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/parcels"
            ]
          }
        ],
        "parameters": [
          {
            "description": "Unique ID used to track the parcel, returned after acquiring a\npurchase label.",
            "in": "path",
            "name": "parcelId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/products/v1/product/{productId}": {
      "patch": {
        "operationId": "UpdateProduct",
        "responses": {
          "200": {
            "description": "Product has been updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProductModelResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "No product found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "description": "Update product attributes.",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/products"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProductIdType"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUpdateProductModel"
              }
            }
          }
        }
      },
      "get": {
        "operationId": "GetProduct",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProductModelResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "No product found with the productId provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "description": "Get product information for products.",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/products"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProductIdType"
            }
          }
        ]
      }
    },
    "/products/v1/product/{productId}/link/{externalProductId}": {
      "patch": {
        "operationId": "LinkAliasToProduct",
        "responses": {
          "200": {
            "description": "externalProductId has been linked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProductModelResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "No product found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "description": "Links an externalProductId to an existing product.\nA product can only be linked to one externalProductId.",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/products"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProductIdType"
            }
          },
          {
            "in": "path",
            "name": "externalProductId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalProductIdType"
            }
          }
        ]
      }
    },
    "/products/v1/product/unlink/externalId/{externalProductId}": {
      "patch": {
        "operationId": "UnlinkAliasFromProducts",
        "responses": {
          "204": {
            "description": "externalProductId has been unlinked"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "No product found with the externalProductId provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "description": "Unlinks an externalProductId from any existing product it is currently associated with.",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/products"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "externalProductId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalProductIdType"
            }
          }
        ]
      }
    },
    "/products/v1/product/externalId/{externalProductId}": {
      "get": {
        "operationId": "GetProductByExternalProductId",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProductModelResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "No product found with the productId provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "description": "Get product information for products.",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/products"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "externalProductId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ExternalProductIdType"
            }
          }
        ]
      }
    },
    "/products/v1/product/inventory": {
      "get": {
        "operationId": "GetAllInventory",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApiInventoryResponseModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        },
        "description": "Get all inventory.",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/products"
            ]
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Limit"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Offset"
            }
          },
          {
            "in": "query",
            "name": "poolName",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/InventoryPool"
            }
          }
        ]
      }
    },
    "/products/v1/product/warehouse": {
      "get": {
        "operationId": "GetWarehouseDetails",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApiWarehouseResponseModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "description": "Get warehouse information for a given list of productIds.",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/products"
            ]
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "productIds",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "poolName",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/InventoryPool"
            }
          }
        ]
      }
    },
    "/products/v1/product/products": {
      "get": {
        "operationId": "GetProducts",
        "responses": {
          "200": {
            "description": "List of products",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApiProductModelResponse"
                  },
                  "type": "array"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        },
        "description": "Get a list of products and their information.",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/products"
            ]
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Limit"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Offset"
            }
          }
        ]
      }
    },
    "/products/v1/product/{productId}/barcode": {
      "post": {
        "operationId": "CreateProductBarcode",
        "responses": {
          "202": {
            "description": "Barcode has been created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProductModelResponse"
                }
              }
            }
          },
          "400": {
            "description": "Barcode value provided not unique",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "No product found with the productId provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "description": "Validates and assigns a new barcode to this product.",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/products"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProductIdType"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BarcodeOption"
              }
            }
          }
        }
      }
    },
    "/products/v1/product/{productId}/inventory": {
      "get": {
        "operationId": "GetProductInventory",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInventoryResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "No product found with the productId provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "description": "Get available inventory information for product.",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/products"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ProductIdType"
            }
          },
          {
            "in": "query",
            "name": "poolName",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/InventoryPool"
            }
          }
        ]
      }
    },
    "/products/v1/product": {
      "post": {
        "operationId": "CreateProduct",
        "responses": {
          "202": {
            "description": "Product has been created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProductModelResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "No product found with the productId provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "description": "Create a new product.",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/products"
            ]
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProductModel"
              }
            }
          }
        }
      }
    },
    "/reports/v1/status/{reportReference}": {
      "get": {
        "operationId": "GetReportStatus",
        "responses": {
          "200": {
            "description": "Report status and url",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "A report with the given report reference was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "description": "Poll this endpoint using the reportReference returned by the \"Create report\" endpoint.\nUse this endpoint to download the reports generated by the creation request.",
        "tags": [
          "Reports"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/reports"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "reportReference",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/reports/v1/report": {
      "post": {
        "operationId": "GenerateReport",
        "responses": {
          "200": {
            "description": "Report is being created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportGenerationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "description": "Create a report that can be downloaded as a CSV from the \"Get report status and url\" endpoint\n<tbody>\n              <br>\n              <tr style=\"height: 22px;\">\n              <td style=\"width: 69.8571%; height: 21px;\">\n              <p class=\"wysiwyg-indent1\"><strong>Relevant reports</strong></p>\n              <p class=\"wysiwyg-indent1\">Here are a few important reports for tracking <b>Inventory</b>,\n                                         <b>Orders</b> and <b>Shipments</b>:</p>\n              </td>\n              </tr>\n              <tr style=\"height: 22px;\">\n              <td style=\"width: 69.8571%; height: 22px;\">\n              <p class=\"wysiwyg-indent1\"><a href=\"https://support.deliverr.com/hc/en-us/articles/1500008315782-Inbounds-Shipments-Report\" target=\"_self\"><strong>Inbounds - Shipments: </strong></a>This report provides the status of the shipments that make up your shipping plans. You will also find receiving information. (Requires startDate and endDate)<em>&nbsp;</em></p>\n              </td>\n              <tr style=\"height: 22px;\">\n              <td class=\"wysiwyg-indent1\" style=\"width: 30.1429%; height: 22px;\">\n              </td>\n              <td style=\"width: 69.8571%; height: 22px;\">\n              <p class=\"wysiwyg-indent1\"><a href=\"https://support.deliverr.com/hc/en-us/articles/1500008318542-Inventory-Levels-Today-Report\" target=\"_self\"><strong>Inventory - Levels Today: </strong></a>This report provides a snapshot of the most recent inventory levels by SKU at each Deliverr fulfillment center. In addition, you will find data for orders placed over the last 30 days and days of fast tag remaining. The snapshot is taken around midnight UTC every day.</p>\n              </td>\n              </tr>\n              <tr style=\"height: 22px;\">\n              <td style=\"width: 69.8571%; height: 16px;\">\n              <p class=\"wysiwyg-indent1\"><a href=\"https://support.deliverr.com/hc/en-us/articles/1500011593962-Orders-Orders-Report\" target=\"_self\"><strong>Orders - All Orders: </strong></a>This report captures critical order information, such as marketplace, order creation time, order IDs, fulfillment cost, and important order status information (processing, shipped, delivered, cancelled, and error). You will also find order error codes:</p>\n              <ul>\n              <li>BAD_ADDRESS - the order's address cannot be validated, and you must correct it</li>\n              <li>STOCKOUT - the order cannot be fulfilled because one or more SKUs is stocked out</li>\n              <li>DSKU_NEVER_INBOUNDED - this order cannot be fulfilled because one or more SKUs was never inbounded to Deliverr</li>\n              </ul>\n              (Requires startDate and endDate) <br><br>\n              </td>\n              </tr>\n              <tr style=\"height: 16px;\">\n              <td style=\"width: 69.8571%; height: 16px;\">\n              <p class=\"wysiwyg-indent1\"><a href=\"https://support.deliverr.com/hc/en-us/articles/1500011618401-Orders-Shipments-Report\" target=\"_self\"><strong>Orders - Shipments: </strong></a>This report provides information about the shipments in your orders. (Requires startDate and endDate)</p>\n              </td>\n              </tr>\n              </tbody>",
        "tags": [
          "Reports"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/reports"
            ]
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportGenerationRequest"
              }
            }
          }
        }
      }
    },
    "/returns/v1/orders": {
      "post": {
        "operationId": "CreateOrderReturn",
        "responses": {
          "201": {
            "description": "Return order details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnsApiOrder"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        },
        "description": "Creates return order for inspection.",
        "tags": [
          "Returns"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/returns"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The caller identifier.",
            "in": "header",
            "name": "x-caller-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReturnsApiCreateOrderRequest"
              }
            }
          }
        }
      }
    },
    "/returns/v1/orders/{returnId}": {
      "get": {
        "operationId": "GetOrderReturn",
        "responses": {
          "200": {
            "description": "Return details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnsApiOrder"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "description": "Get return by returnId. This will include ReturnOrder, ReturnItems with inspection\nstatus and ShippingLabel.",
        "tags": [
          "Returns"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/returns"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The caller identifier.",
            "in": "header",
            "name": "x-caller-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique ID used to track the return.",
            "in": "path",
            "name": "returnId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/returns/v1/orders/{returnId}/cancel": {
      "put": {
        "operationId": "CancelOrderReturn",
        "responses": {
          "204": {
            "description": "Sucessfully cancelled the return"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "description": "Cancel a return that was create. Return will not be cancelled if it is received.",
        "tags": [
          "Returns"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/returns"
            ]
          }
        ],
        "parameters": [
          {
            "description": "The caller identifier.",
            "in": "header",
            "name": "x-caller-id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique ID used to track the return.",
            "in": "path",
            "name": "returnId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/storage/v1/inbounds/{shippingPlanId}": {
      "get": {
        "operationId": "GetInboundOrder",
        "responses": {
          "200": {
            "description": "Storage Inbound Details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageApiInboundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "description": "Get storage inbound by storageInboundId. This will include StorageInboundOrder,\nStorageInboundItems with status .",
        "tags": [
          "Storage"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/storage"
            ]
          }
        ],
        "parameters": [
          {
            "description": "Unique ID used to get the storageInboundCreated.",
            "in": "path",
            "name": "shippingPlanId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/webhooks/v1/webhook": {
      "post": {
        "operationId": "CreateWebhook",
        "responses": {
          "202": {
            "description": "Webhook has been created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "description": "Create a webhook to subscribe to a type of Deliverr event.",
        "tags": [
          "Webhooks"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/webhooks"
            ]
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookCreateModel"
              }
            }
          }
        }
      },
      "get": {
        "operationId": "GetWebhooks",
        "responses": {
          "200": {
            "description": "List of webhook entries",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/WebhookModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        },
        "description": "Get all webhooks currently registered and active.",
        "tags": [
          "Webhooks"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/webhooks"
            ]
          }
        ],
        "parameters": []
      }
    },
    "/webhooks/v1/event": {
      "post": {
        "operationId": "TriggerMockWebhookEvent",
        "responses": {
          "204": {
            "description": "Webhook triggered"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          }
        },
        "description": "Trigger a mock webhook event to test that your webhooks are working successfully.",
        "tags": [
          "Webhooks"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/webhooks"
            ]
          }
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MockWebhookDetails"
              }
            }
          }
        }
      }
    },
    "/webhooks/v1/webhook/{webhookId}": {
      "get": {
        "operationId": "GetWebhook",
        "responses": {
          "200": {
            "description": "Webhook details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "A webhook with the webhook id provided was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "description": "Get a specific webhook using the webhook identifier.",
        "tags": [
          "Webhooks"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/webhooks"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "webhookId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/WebookIdType"
            }
          }
        ]
      },
      "delete": {
        "operationId": "DeleteWebhook",
        "responses": {
          "204": {
            "description": "Webhook has been deleted"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "A webhook with the webhook id provided was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        },
        "description": "Delete a webhook that has been created.",
        "tags": [
          "Webhooks"
        ],
        "security": [
          {
            "OAuth2.0": [
              "api/webhooks"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "webhookId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/WebookIdType"
            }
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "default": "Internal server error"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "StatusCodes.UNAUTHORIZED": {
        "enum": [
          401
        ],
        "type": "number"
      },
      "UnauthorizedError": {
        "properties": {
          "code": {
            "$ref": "#/components/schemas/StatusCodes.UNAUTHORIZED"
          },
          "message": {
            "type": "string",
            "default": "Unauthorized"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "StatusCodes.INTERNAL_SERVER_ERROR": {
        "enum": [
          500
        ],
        "type": "number"
      },
      "InternalServerError": {
        "properties": {
          "code": {
            "$ref": "#/components/schemas/StatusCodes.INTERNAL_SERVER_ERROR"
          },
          "message": {
            "type": "string",
            "default": "Internal Server Error"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "BundleIdType": {
        "type": "string",
        "description": "The globally unique bundle identifier created by Deliverr and assigned on bundle creation.\nMay be referred to in other documentation as the Deliverr SKU or BSKU.",
        "pattern": "^B[0-9a-zA-Z]+$",
        "minLength": 11,
        "maxLength": 11
      },
      "CreationDate": {
        "type": "string",
        "format": "date-time",
        "description": "The timestamp of creation in RFC 3339 format.\ne.g. 2017-07-21T17:32:28Z"
      },
      "ExternalBundleIdType": {
        "type": "string",
        "description": "A permanent unique reference for this bundle generated by and meaningful to the API user.\nThis value will be used when sending orders to identify the bundle to ship.\nThis value must be unique among all bundles created via API.",
        "minLength": 1,
        "maxLength": 255
      },
      "SkuType": {
        "type": "string",
        "description": "The human-readable Stock Keeping Unit (SKU) for reporting. This value may change over time.",
        "minLength": 1,
        "maxLength": 255
      },
      "ProductIdType": {
        "type": "string",
        "description": "The globally unique product identifier created by Deliverr and assigned on product creation.\nMay be referred to in other documentation as the Deliverr SKU or DSKU.",
        "pattern": "^D[0-9a-zA-Z]+$",
        "minLength": 11,
        "maxLength": 11
      },
      "BundleContent": {
        "properties": {
          "productId": {
            "$ref": "#/components/schemas/ProductIdType"
          },
          "quantity": {
            "type": "number",
            "format": "double",
            "description": "Provide the quantity of that product that will be part of the bundle being created."
          }
        },
        "required": [
          "productId",
          "quantity"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ApiBundleModelResponse": {
        "properties": {
          "externalBundleId": {
            "$ref": "#/components/schemas/ExternalBundleIdType"
          },
          "title": {
            "type": "string",
            "description": "The bundle title or short description. Should represent a single line of text suitable to\nidentify the bundle or for search purposes.",
            "minLength": 3,
            "maxLength": 255
          },
          "sku": {
            "$ref": "#/components/schemas/SkuType"
          },
          "bundleContents": {
            "items": {
              "$ref": "#/components/schemas/BundleContent"
            },
            "type": "array",
            "minItems": 1,
            "maxItems": 20
          },
          "bundleId": {
            "$ref": "#/components/schemas/BundleIdType"
          },
          "createdAt": {
            "$ref": "#/components/schemas/CreationDate"
          }
        },
        "required": [
          "externalBundleId",
          "title",
          "sku",
          "bundleContents",
          "bundleId",
          "createdAt"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "StatusCodes.NOT_FOUND": {
        "enum": [
          404
        ],
        "type": "number"
      },
      "NotFoundError": {
        "properties": {
          "code": {
            "$ref": "#/components/schemas/StatusCodes.NOT_FOUND"
          },
          "message": {
            "type": "string",
            "default": "Not Found"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "StatusCodes.FORBIDDEN": {
        "enum": [
          403
        ],
        "type": "number"
      },
      "ForbiddenError": {
        "properties": {
          "code": {
            "$ref": "#/components/schemas/StatusCodes.FORBIDDEN"
          },
          "message": {
            "type": "string",
            "default": "Forbidden"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ApiBundleInventoryResponseModel": {
        "properties": {
          "bundleId": {
            "$ref": "#/components/schemas/BundleIdType"
          },
          "availableUnits": {
            "type": "number",
            "format": "double",
            "description": "The number of units available for sale - not reserved for open orders,\nbelonging to bundles that are in a pickable and shippable\nstate at connected warehouses."
          }
        },
        "required": [
          "bundleId",
          "availableUnits"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "StatusCodes.UNPROCESSABLE_ENTITY": {
        "enum": [
          422
        ],
        "type": "number"
      },
      "UnprocessableEntityError": {
        "properties": {
          "code": {
            "$ref": "#/components/schemas/StatusCodes.UNPROCESSABLE_ENTITY"
          },
          "message": {
            "type": "string",
            "default": "Unprocessable Entity"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ApiBundleModel": {
        "properties": {
          "externalBundleId": {
            "$ref": "#/components/schemas/ExternalBundleIdType"
          },
          "title": {
            "type": "string",
            "description": "The bundle title or short description. Should represent a single line of text suitable to\nidentify the bundle or for search purposes.",
            "minLength": 3,
            "maxLength": 255
          },
          "sku": {
            "$ref": "#/components/schemas/SkuType"
          },
          "bundleContents": {
            "items": {
              "$ref": "#/components/schemas/BundleContent"
            },
            "type": "array",
            "minItems": 1,
            "maxItems": 20
          }
        },
        "required": [
          "externalBundleId",
          "title",
          "sku",
          "bundleContents"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Currency": {
        "type": "string",
        "enum": [
          "USD"
        ],
        "nullable": false
      },
      "Price": {
        "properties": {
          "amount": {
            "type": "number",
            "format": "float"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          }
        },
        "required": [
          "amount"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ShippingRateResponse": {
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the shipping rate to display to the customer",
            "example": "Free 2-Day Delivery"
          },
          "code": {
            "type": "string",
            "description": "An identifier for the shipping rate",
            "example": "Deliverr-2-Day"
          },
          "shippingDays": {
            "type": "integer",
            "format": "int32",
            "description": "The number of transit days for the shipping rate",
            "example": 2
          },
          "arrivesBy": {
            "type": "string",
            "description": "A message with the arrival date",
            "example": "Arrives by Thursday, March 10th"
          },
          "price": {
            "$ref": "#/components/schemas/Price",
            "description": "The price of the of the shipping rate"
          },
          "note": {
            "type": "string",
            "description": "Additional information to share with the customer",
            "example": "Free 2-Day Delivery isn't available to PO Boxes"
          }
        },
        "required": [
          "name",
          "code",
          "shippingDays",
          "arrivesBy",
          "price"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ShippingRateError": {
        "enum": [
          "INVALID_ADDRESS",
          "INVALID_CURRENCY",
          "MISSING_SELLER_ID",
          "MISSING_SKUS",
          "UNKNOWN_ERROR"
        ],
        "type": "string"
      },
      "StatusCodes.BAD_REQUEST": {
        "enum": [
          400
        ],
        "type": "number"
      },
      "BadCreateShippingRequestError": {
        "properties": {
          "code": {
            "$ref": "#/components/schemas/StatusCodes.BAD_REQUEST"
          },
          "message": {
            "type": "string",
            "default": "Bad Request"
          },
          "type": {
            "$ref": "#/components/schemas/ShippingRateError"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "CountryCode": {
        "type": "string",
        "enum": [
          "AF",
          "AX",
          "AL",
          "DZ",
          "AS",
          "AD",
          "AO",
          "AI",
          "AQ",
          "AG",
          "AR",
          "AM",
          "AW",
          "AU",
          "AT",
          "AZ",
          "BS",
          "BH",
          "BD",
          "BB",
          "BY",
          "BE",
          "BZ",
          "BJ",
          "BM",
          "BT",
          "BO",
          "BQ",
          "BA",
          "BW",
          "BV",
          "BR",
          "IO",
          "BN",
          "BG",
          "BF",
          "BI",
          "CV",
          "KH",
          "CM",
          "CA",
          "KY",
          "CF",
          "TD",
          "CL",
          "CN",
          "CX",
          "CC",
          "CO",
          "KM",
          "CG",
          "CD",
          "CK",
          "CR",
          "CI",
          "HR",
          "CU",
          "CW",
          "CY",
          "CZ",
          "DK",
          "DJ",
          "DM",
          "DO",
          "EC",
          "EG",
          "SV",
          "GQ",
          "ER",
          "EE",
          "SZ",
          "ET",
          "FK",
          "FO",
          "FJ",
          "FI",
          "FR",
          "GF",
          "PF",
          "TF",
          "GA",
          "GM",
          "GE",
          "DE",
          "GH",
          "GI",
          "GR",
          "GL",
          "GD",
          "GP",
          "GU",
          "GT",
          "GG",
          "GN",
          "GW",
          "GY",
          "HT",
          "HM",
          "VA",
          "HN",
          "HK",
          "HU",
          "IS",
          "IN",
          "ID",
          "IR",
          "IQ",
          "IE",
          "IM",
          "IL",
          "IT",
          "JM",
          "JP",
          "JE",
          "JO",
          "KZ",
          "KE",
          "KI",
          "KP",
          "KR",
          "KW",
          "KG",
          "LA",
          "LV",
          "LB",
          "LS",
          "LR",
          "LY",
          "LI",
          "LT",
          "LU",
          "MO",
          "MG",
          "MW",
          "MY",
          "MV",
          "ML",
          "MT",
          "MH",
          "MQ",
          "MR",
          "MU",
          "YT",
          "MX",
          "FM",
          "MD",
          "MC",
          "MN",
          "ME",
          "MS",
          "MA",
          "MZ",
          "MM",
          "NA",
          "NR",
          "NP",
          "NL",
          "NC",
          "NZ",
          "NI",
          "NE",
          "NG",
          "NU",
          "NF",
          "MK",
          "MP",
          "NO",
          "OM",
          "PK",
          "PW",
          "PS",
          "PA",
          "PG",
          "PY",
          "PE",
          "PH",
          "PN",
          "PL",
          "PT",
          "PR",
          "QA",
          "RE",
          "RO",
          "RU",
          "RW",
          "BL",
          "SH",
          "KN",
          "LC",
          "MF",
          "PM",
          "VC",
          "WS",
          "SM",
          "ST",
          "SA",
          "SN",
          "RS",
          "SC",
          "SL",
          "SG",
          "SX",
          "SK",
          "SI",
          "SB",
          "SO",
          "ZA",
          "GS",
          "SS",
          "ES",
          "LK",
          "SD",
          "SR",
          "SJ",
          "SE",
          "CH",
          "SY",
          "TW",
          "TJ",
          "TZ",
          "TH",
          "TL",
          "TG",
          "TK",
          "TO",
          "TT",
          "TN",
          "TR",
          "TM",
          "TC",
          "TV",
          "UG",
          "UA",
          "AE",
          "GB",
          "US",
          "UM",
          "UY",
          "UZ",
          "VU",
          "VE",
          "VN",
          "VG",
          "VI",
          "WF",
          "EH",
          "YE",
          "ZM",
          "ZW"
        ],
        "nullable": false
      },
      "Address": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of entity.",
            "minLength": 3,
            "maxLength": 35
          },
          "street1": {
            "type": "string",
            "description": "First address line of the address.",
            "maxLength": 50
          },
          "street2": {
            "type": "string",
            "description": "Second address line of the address.",
            "maxLength": 30
          },
          "company": {
            "type": "string",
            "description": "Company name for the entity.",
            "maxLength": 30
          },
          "city": {
            "type": "string",
            "description": "City of the address.",
            "maxLength": 30
          },
          "state": {
            "type": "string",
            "description": "State or region of the address - if a US countryCode, must be the\n2-letter state postal abbreviation.",
            "maxLength": 30
          },
          "postcode": {
            "type": "string",
            "description": "Postal code of the address.",
            "maxLength": 30
          },
          "countryCode": {
            "$ref": "#/components/schemas/CountryCode",
            "description": "2 character IANA country code of the address."
          }
        },
        "required": [
          "name",
          "street1",
          "city",
          "state",
          "postcode",
          "countryCode"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ShippingRateRequest": {
        "properties": {
          "destination": {
            "$ref": "#/components/schemas/Address",
            "description": "The customer's shipping address"
          },
          "dskus": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Array of Deliverr SKUs (DSKUs) in the cart. Request must contain either dskus or\nskus in order to generate a shipping rate.",
            "example": [
              "D1234567890",
              "DABCDEFGHIJ"
            ]
          },
          "skus": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Array of SKUs in the cart. Request must contain either dskus or skus in order to\ngenerate a shipping rate.",
            "example": [
              "my-sku-1",
              "my-sku-2"
            ]
          },
          "cartValue": {
            "$ref": "#/components/schemas/Price",
            "description": "The total price of the cart. Used to determine if cart minimum have been met\n(if cart minimum is configured)"
          }
        },
        "required": [
          "destination"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ShippingPlanStatus": {
        "enum": [
          "ARCHIVED",
          "PENDING",
          "SHIPMENTS_CREATED"
        ],
        "type": "string"
      },
      "Item": {
        "properties": {
          "productId": {
            "$ref": "#/components/schemas/ProductIdType"
          },
          "quantity": {
            "type": "number",
            "format": "double",
            "description": "The quantity of this product that is being shipped."
          }
        },
        "required": [
          "productId",
          "quantity"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ApiInboundShipmentStatus": {
        "description": "The current status of the shipment.\n<ul>\n  <li> NEED_PACKAGE_DETAILS: Shipment was just created and no packages have been added yet </li>\n  <li> PACKAGES_ADDED: Packages were added but can be changed </li>\n  <li> PACKAGES_FINAL: Packages were added but cannot be changed anymore </li>\n  <li> READY_FOR_WAREHOUSE: At the minimum, the shipment has been confirmed </li>\n  <li> IN_TRANSIT: Shipment is in transit </li>\n  <li> ARRIVED: The truck has arrived at the cross dock and at least 1 package has been dropped off </li>\n  <li> CROSS_DOCKING: Shipment is at the cross dock and is being split up to the fulfillment centers it will go do </li>\n  <li> FORWARDING: Packages have left the cross dock and are on the road to the fulfillment center </li>\n  <li> RECEIVING: Receiving shipments at fulfillment center </li>\n  <li> COMPLETED: All shipments have been received, or no shipments have been received for a while and the inbound is\n  considered completed </li>\n</ul>",
        "enum": [
          "NEED_PACKAGE_DETAILS",
          "PACKAGES_ADDED",
          "PACKAGES_FINAL",
          "READY_FOR_WAREHOUSE",
          "IN_TRANSIT",
          "ARRIVED",
          "CROSS_DOCKING",
          "FORWARDING",
          "RECEIVING",
          "COMPLETED"
        ],
        "type": "string"
      },
      "ShipmentItem": {
        "properties": {
          "quantity": {
            "type": "number",
            "format": "double",
            "description": "The quantity of this product that is being shipped."
          },
          "receivedQuantity": {
            "type": "number",
            "format": "double",
            "description": "The quantity of this product that has been received."
          },
          "productId": {
            "$ref": "#/components/schemas/ProductIdType"
          }
        },
        "required": [
          "quantity",
          "receivedQuantity",
          "productId"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "LengthUnit": {
        "type": "string",
        "enum": [
          "in",
          "cm"
        ]
      },
      "WeightUnit": {
        "type": "string",
        "enum": [
          "oz",
          "kg",
          "lb"
        ]
      },
      "Package": {
        "properties": {
          "length": {
            "type": "number",
            "format": "float",
            "description": "Length of the package.",
            "example": 12,
            "minimum": 0.01
          },
          "width": {
            "type": "number",
            "format": "float",
            "description": "Width of the package.",
            "example": 3,
            "minimum": 0.01
          },
          "height": {
            "type": "number",
            "format": "float",
            "description": "Height of the package.",
            "example": 5,
            "minimum": 0.01
          },
          "weight": {
            "type": "number",
            "format": "float",
            "description": "Weight of the package.",
            "example": 3,
            "minimum": 0.01
          },
          "dimensionUnit": {
            "$ref": "#/components/schemas/LengthUnit",
            "description": "Which length measurement standards are being\nused for the package.",
            "example": "in"
          },
          "weightUnit": {
            "$ref": "#/components/schemas/WeightUnit",
            "description": "Which weight measurement standards are being\nused for the package.",
            "example": "lb"
          },
          "cdsku": {
            "type": "string",
            "description": "The cross dock identifier."
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "type": "array",
            "description": "The items in this package."
          }
        },
        "required": [
          "cdsku",
          "items"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Shipment": {
        "properties": {
          "shipmentId": {
            "type": "number",
            "format": "double",
            "description": "Deliverr's internal identifier for the shipment."
          },
          "status": {
            "$ref": "#/components/schemas/ApiInboundShipmentStatus"
          },
          "shipToAddress": {
            "$ref": "#/components/schemas/Address",
            "description": "The destination address of the shipment."
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/ShipmentItem"
            },
            "type": "array",
            "description": "All items of this shipment."
          },
          "packages": {
            "items": {
              "$ref": "#/components/schemas/Package"
            },
            "type": "array",
            "description": "All packages of this shipment."
          }
        },
        "required": [
          "shipmentId",
          "status",
          "shipToAddress",
          "items",
          "packages"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ShippingPlanResponse": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the shipping plan."
          },
          "externalShippingPlanId": {
            "type": "string",
            "description": "The seller's shipping plan identifier."
          },
          "shippingPlanId": {
            "type": "string",
            "description": "Deliverr's internal shipping plan identifier."
          },
          "fromAddress": {
            "$ref": "#/components/schemas/Address",
            "description": "The address from which the shipments are inbounded."
          },
          "status": {
            "$ref": "#/components/schemas/ShippingPlanStatus",
            "description": "Current status of the shippment."
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "type": "array",
            "description": "All items part of this shipping plan."
          },
          "shipments": {
            "items": {
              "$ref": "#/components/schemas/Shipment"
            },
            "type": "array",
            "description": "All shipments for this shipping plan."
          }
        },
        "required": [
          "externalShippingPlanId",
          "shippingPlanId",
          "status",
          "items",
          "shipments"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "BadRequestError": {
        "properties": {
          "code": {
            "$ref": "#/components/schemas/StatusCodes.BAD_REQUEST"
          },
          "message": {
            "type": "string",
            "default": "Bad Request"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "PlanItem": {
        "properties": {
          "productId": {
            "$ref": "#/components/schemas/ProductIdType"
          },
          "quantity": {
            "type": "number",
            "format": "double",
            "description": "The quantity of this product that is being shipped."
          },
          "caseQuantity": {
            "type": "number",
            "format": "double",
            "description": "The case quantity for this item."
          }
        },
        "required": [
          "productId",
          "quantity"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "PackageType": {
        "properties": {
          "length": {
            "type": "number",
            "format": "float",
            "description": "Length of the package.",
            "example": 12,
            "minimum": 0.01
          },
          "width": {
            "type": "number",
            "format": "float",
            "description": "Width of the package.",
            "example": 3,
            "minimum": 0.01
          },
          "height": {
            "type": "number",
            "format": "float",
            "description": "Height of the package.",
            "example": 5,
            "minimum": 0.01
          },
          "weight": {
            "type": "number",
            "format": "float",
            "description": "Weight of the package.",
            "example": 3,
            "minimum": 0.01
          },
          "dimensionUnit": {
            "$ref": "#/components/schemas/LengthUnit",
            "description": "Which length measurement standards are being\nused for the package.",
            "example": "in"
          },
          "weightUnit": {
            "$ref": "#/components/schemas/WeightUnit",
            "description": "Which weight measurement standards are being\nused for the package.",
            "example": "lb"
          },
          "numPackages": {
            "type": "number",
            "format": "double",
            "description": "The number of packages shipped for this package type."
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "type": "array",
            "description": "The list of items shipped in this package type."
          }
        },
        "required": [
          "numPackages",
          "items"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ShippingPlanRequest": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the shipping plan."
          },
          "externalShippingPlanId": {
            "type": "string",
            "description": "The seller's shipping plan identifier."
          },
          "fromAddress": {
            "$ref": "#/components/schemas/Address",
            "description": "The address from which the packages are inbounded."
          },
          "destination": {
            "type": "string",
            "description": "The crossdock identifier where the packages will be shipped to."
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/PlanItem"
            },
            "type": "array",
            "description": "The list of all items part of this shipping plan."
          },
          "packageTypes": {
            "items": {
              "$ref": "#/components/schemas/PackageType"
            },
            "type": "array",
            "description": "The list of different package types part of this shipping plan.\nEach package type can represent multiple packages."
          }
        },
        "required": [
          "externalShippingPlanId",
          "fromAddress",
          "destination",
          "items",
          "packageTypes"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ShippingLabelResponse": {
        "properties": {
          "url": {
            "type": "string",
            "description": "The url for downloading the shipping labels."
          }
        },
        "required": [
          "url"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "StatusCodes.ACCEPTED": {
        "enum": [
          202
        ],
        "type": "number"
      },
      "AcceptedSuccess": {
        "properties": {
          "code": {
            "$ref": "#/components/schemas/StatusCodes.ACCEPTED"
          },
          "message": {
            "type": "string",
            "default": "Accepted"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "BoxLabelsFormat": {
        "enum": [
          "US_LETTER",
          "THERMAL_4_X_6",
          "A4_PAPER"
        ],
        "type": "string"
      },
      "LabelLanguage": {
        "enum": [
          "ENGLISH",
          "SPANISH",
          "MANDARIN"
        ],
        "type": "string"
      },
      "TokenResponse": {
        "properties": {
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          },
          "expires_in": {
            "type": "integer",
            "format": "int32"
          },
          "token_type": {
            "type": "string"
          }
        },
        "required": [
          "access_token"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "GrantTypes": {
        "enum": [
          "authorization_code",
          "refresh_token"
        ],
        "type": "string"
      },
      "TokenRequest": {
        "properties": {
          "grant_type": {
            "$ref": "#/components/schemas/GrantTypes"
          },
          "refresh_token": {
            "type": "string",
            "description": "Must be present if grant_type is refresh_token."
          },
          "code": {
            "type": "string",
            "description": "Must be present if grant_type is authorization_code."
          }
        },
        "required": [
          "grant_type"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "OrderIdType": {
        "type": "string",
        "description": "A unique identifier for this order.",
        "pattern": "^\\d+$"
      },
      "ApiOrderStatus": {
        "enum": [
          "CREATED",
          "ERROR",
          "SHIPPED",
          "PARTIALLY_SHIPPED",
          "DELIVERED",
          "CANCELLED",
          "PROCESSING"
        ],
        "type": "string"
      },
      "ShippingCarrierType": {
        "type": "string",
        "description": "Unique shipping carrier identifier.",
        "enum": [
          "USPS",
          "FEDEX",
          "UPS",
          "DHL",
          "DOORDASH",
          "ONTRAC",
          "LASERSHIP",
          "LSO",
          "PCF",
          "AXLEHIRE",
          "FREIGHT",
          "COURIER",
          "BETTERTRUCKS",
          "TFORCE",
          "UDS",
          "CDL",
          "DELIVERR",
          "GLS"
        ]
      },
      "ShippingServiceType": {
        "type": "string",
        "description": "Unique shipping service identifier.",
        "enum": [
          "USPS.PRIORITY",
          "USPS.EXPRESS.MAIL",
          "USPS.FIRST.CLASS.MAIL",
          "USPS.PARCEL.SELECT.NONPRESORT",
          "USPS.MEDIA.MAIL.SINGLEPIECE",
          "USPS.FIRST.CLASS.MAIL.INTERNATIONAL",
          "USPS.PRIORITY.MAIL.INTERNATIONAL",
          "USPS.EXPRESS.MAIL.INTERNATIONAL",
          "FEDEX.GROUND",
          "FEDEX.GROUND.ECONOMY",
          "FEDEX.HOME.DELIVERY",
          "FEDEX.SMARTPOST.STANDARD",
          "FEDEX.2DAY.SHIPPING",
          "FEDEX.2DAY.AM.SHIPPING",
          "FEDEX.EXPRESS.SAVER.ECONOMY",
          "FEDEX.OVERNIGHT.STANDARD",
          "FEDEX.PRIORITY.OVERNIGHT",
          "FEDEX.INTERNATIONAL.ECONOMY",
          "FEDEX.INTERNATIONAL.PRIORITY",
          "FEDEX.FREIGHT.ECONOMY",
          "UPS.STANDARD",
          "UPS.GROUND",
          "UPS.3.DAY.SELECT",
          "UPS.2ND.DAY.AIR",
          "UPS.2ND.DAY.AIR.AM",
          "UPS.NEXT.DAY.AIR",
          "UPS.NEXT.DAY.AIR.SAVER",
          "UPS.NEXT.DAY.AIR.AM",
          "UPS.MAIL.INNOVATIONS",
          "UPS.SUREPOST",
          "UPS.SUREPOST.LIGHTWEIGHT",
          "UPS.WORLDWIDE.EXPRESS",
          "UPS.WORLDWIDE.EXPRESS.PLUS",
          "UPS.WORLDWIDE.EXPEDITED",
          "DHL.EXPRESS.WORLDWIDE",
          "DHL.PARCEL.EXP.MAX",
          "DHL.PARCEL.PLUS.EXP.MAX",
          "DHL.PARCEL.EXP.MAX.ATL",
          "DHL.PARCEL.PLUS.EXP.MAX.ATL",
          "DHL.PARCEL.EXP.MAX.BWI",
          "DHL.PARCEL.PLUS.EXP.MAX.BWI",
          "DHL.PARCEL.EXP.MAX.CVG",
          "DHL.PARCEL.PLUS.EXP.MAX.CVG",
          "DHL.PARCEL.EXP.MAX.LAX",
          "DHL.PARCEL.PLUS.EXP.MAX.LAX",
          "DHL.PARCEL.EXP.MAX.DFW",
          "DHL.PARCEL.PLUS.EXP.MAX.DFW",
          "DHL.PARCEL.EXP.MAX.ORD",
          "DHL.PARCEL.PLUS.EXP.MAX.ORD",
          "DHL.PARCEL.EXP.MAX.EWR",
          "DHL.PARCEL.PLUS.EXP.MAX.EWR",
          "DHL.PARCEL.EXP.MAX.RDU",
          "DHL.PARCEL.PLUS.EXP.MAX.RDU",
          "DHL.PARCEL.EXP.MAX.SFO",
          "DHL.PARCEL.PLUS.EXP.MAX.SFO",
          "DHL.PARCEL.EXP",
          "DHL.PARCEL.PLUS.EXP",
          "DHL.PARCEL.GROUND",
          "DHL.PARCEL.INTERNATIONAL.DIRECT",
          "DHL.PARCEL.INTERNATIONAL.STANDARD",
          "DHL.PACKET.INTERNATIONAL",
          "DOORDASH.NEXT.DAY",
          "DOORDASH.SAME.DAY",
          "ONTRAC.GROUND",
          "ONTRAC.GROUND.BEN",
          "ONTRAC.GROUND.LAS",
          "ONTRAC.GROUND.LAX",
          "ONTRAC.GROUND.RNO",
          "LASERSHIP.ROUTED.DELIVERY",
          "LASERSHIP.ROUTED.DELIVERY.CLT",
          "LASERSHIP.ROUTED.DELIVERY.MCO",
          "LASERSHIP.ROUTED.DELIVERY.EWR",
          "LASERSHIP.ROUTED.DELIVERY.LCK",
          "LSO.GROUND",
          "LSO.GROUND.DFW",
          "LSO.ECOMM",
          "PCF.STANDARD",
          "PCF.2ND.DAY",
          "AXLEHIRE.NEXT.DAY",
          "FREIGHT.LTL",
          "COURIER.PICKUP",
          "BETTERTRUCKS.SAME.DAY",
          "BETTERTRUCKS.EXPRESS",
          "BETTERTRUCKS.ECONOMY",
          "TFORCE.SAME.DAY",
          "TFORCE.NEXT.DAY",
          "TFORCE.BOND.STANDARD",
          "UDS.DELIVERY.SERVICE",
          "CDL.SAME.DAY",
          "CDL.NEXT.DAY",
          "DELIVERR.SHIPPING",
          "GLS.GROUND",
          "GLS.PRIORITY",
          "GLS.EARLY.PRIORITY"
        ]
      },
      "WarehouseIdType": {
        "type": "string",
        "description": "Unique warehouse identifier.",
        "enum": [
          "ALP_JEF",
          "AMP_DFW",
          "APK_SFO",
          "ATL1FC",
          "ATL2RS",
          "BES_DAY",
          "BFF_DFW",
          "BLU_MCO",
          "BLU_ORL",
          "BRL_ATL",
          "BUR_FAR",
          "BUR_SPA",
          "CAR_JAC",
          "CAR_LAS",
          "CAR_LOG",
          "CHA_MAR",
          "CRE_EWR",
          "CUS_CAR",
          "CUS_LAX",
          "DEP_DAY",
          "DEV_TRA",
          "DFW1RS",
          "DFW33P",
          "DLV_LOGONE",
          "DLV_LOGTHR",
          "DLV_LOGTWO",
          "DM_CA_FAT1",
          "DM_MO_STL1",
          "DM_PA_MDT1",
          "DM_TX_DFW1",
          "DPX_LAX",
          "DSD_FRA",
          "DSD_ONT",
          "DVN_CHG",
          "EBI_LAW",
          "ECO_RIV",
          "ELE_RIV",
          "ELT_ATL",
          "ELT_TMP",
          "END_CRE",
          "ENR_CRE",
          "ETV_GAR",
          "EWR1CD",
          "EWR1PR",
          "EWR1RS",
          "EWR23P",
          "FFE_TEX",
          "FIL_BLA",
          "FIL_PAR",
          "FMS1FC",
          "FMS2FC",
          "FUL_BES_EWR",
          "FUL_FAF_DFW",
          "FUL_GPA_PER",
          "FUL_GTH_ORD",
          "FUL_IRM_EWR",
          "FUL_NBD_ORD",
          "GPA_COM",
          "GPA_EDI",
          "GPA_FON",
          "GPA_ONT",
          "GPA_RIV",
          "HEY_CUS_LAX",
          "HIB_ROB",
          "HIB_TRE",
          "HSS_GAR",
          "HUB_ATL",
          "HUB_DFW",
          "HUB_EDI",
          "HUB_FON",
          "HUB_ORD",
          "IKM1MOU",
          "IKMLOG_MOU",
          "IKM_MOU",
          "IKM_PHI",
          "INV_ATL",
          "IRM_EWR",
          "JAY1LAN",
          "JAY_LAN",
          "KEN_JEF",
          "KOM_EAS",
          "LAN_REA",
          "MAI_ORD",
          "MAV_LAN",
          "MDT_EWR",
          "MID_KAN",
          "MKO_MCO",
          "MTR_ESV",
          "NBD_MCD",
          "NBD_SFO",
          "NBD_SFO_002",
          "NBD_TMP",
          "NBD_VAC",
          "NEW_FLO",
          "NFI_EWD",
          "NIM_SFO",
          "NOR_ERL",
          "NOR_LAS",
          "OCE_PER",
          "OPT1ATL",
          "OWD_COL",
          "OWD_MIR",
          "OWD_MOB",
          "PAR_ORD",
          "PBD1ALP",
          "PBD1BOL",
          "PBD_ALP",
          "PBD_BOL",
          "PBD_DUL",
          "PBD_LAS",
          "PBD_SAV",
          "PBD_TMP",
          "POR_ATL",
          "PRO_DAL",
          "PRO_EWR",
          "PRO_NAP",
          "PRO_ORD",
          "PRO_RIC",
          "PRP_GPA_EDI",
          "PRP_GPA_FON",
          "PRV_MCD",
          "PSL_ATL",
          "REK1SUN",
          "REK_SUN",
          "RES_FRE",
          "RNO13P",
          "ROY_LAX",
          "ROY_NJS",
          "RYD_FTW",
          "RYD_PER",
          "RYD_SHO",
          "SCB_FRE",
          "SFL_ATL_001",
          "SFL_ATL_01",
          "SFW_SFS",
          "STL13P",
          "STO_AMP",
          "STO_COL_MCI",
          "STO_CUS_LAX",
          "STO_EDI",
          "STO_EWR",
          "STO_FON",
          "STO_GPA_EDI",
          "STO_GPA_RIV",
          "STO_IRM_EWR",
          "STO_IRM_PER",
          "STO_MCI",
          "STO_NBD_VAC",
          "STO_PXR_LAX",
          "STO_PXR_VRN",
          "STO_SFL_ATL",
          "STO_TST_LOG",
          "SWA_WAY",
          "SWI_CAR",
          "THU_CAR",
          "THU_CIT",
          "THU_HOU",
          "THU_POR",
          "THU_TUC",
          "THU_WOO",
          "TLX_SAV",
          "TRM_STC",
          "TSC_HOU",
          "TST_FMS",
          "TST_LOG",
          "TST_VCR",
          "UNI_ORD",
          "WAR_ROC",
          "WAW_CHI",
          "WAW_LAS",
          "WPL_SFO",
          "YOW13P",
          "YOW1FC"
        ]
      },
      "ApiOrderShipmentStatus": {
        "enum": [
          "CREATED",
          "WAREHOUSE",
          "ERROR",
          "SHIPPED",
          "PARTIALLY_SHIPPED",
          "CANCELLED"
        ],
        "type": "string"
      },
      "ExternalProductIdType": {
        "type": "string",
        "description": "A permanent unique reference for this product generated by and meaningful to the API user.\nThis value will be used when sending orders to identify the product to ship, when reporting\nproducts shipped, and when reporting inventory levels or updates. This value should be chosen\nto represent a PHYSICAL product in the external system, not a virtual product, bundle or kit,\nunless the bundle or kit is inbounded as a single barcoded product. This value must be unique\namong all products created via API.",
        "minLength": 1,
        "maxLength": 255
      },
      "LineItemIdType": {
        "type": "string",
        "description": "Unique line item identifier.",
        "minLength": 1,
        "maxLength": 255
      },
      "OrderApiShipmentItem": {
        "properties": {
          "externalProductId": {
            "$ref": "#/components/schemas/ExternalProductIdType"
          },
          "productId": {
            "$ref": "#/components/schemas/ProductIdType"
          },
          "lineItemId": {
            "$ref": "#/components/schemas/LineItemIdType"
          },
          "status": {
            "$ref": "#/components/schemas/ApiOrderShipmentStatus",
            "description": "The current status for this item.\nThis helper information is on the SKU level and not per shipment level."
          },
          "quantityOrdered": {
            "type": "integer",
            "format": "int32",
            "description": "The total quantity of the product ordered.\nThis helper information is on the SKU level and not per shipment level.",
            "minimum": 1
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "description": "The quantity of the product shipped for this order and shipment.",
            "minimum": 1
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time",
            "description": "The expiration date of the product for the shipped item in this shipment."
          },
          "lotNumber": {
            "type": "string",
            "description": "The lot information of the product for the shipped item in this shipment."
          }
        },
        "required": [
          "externalProductId",
          "productId",
          "status",
          "quantityOrdered",
          "quantity"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "OrderShipmentObject": {
        "properties": {
          "trackingNumber": {
            "type": "string",
            "description": "The unique tracking identifier for this shipment."
          },
          "shippingCarrier": {
            "$ref": "#/components/schemas/ShippingCarrierType",
            "description": "The carrier used for this shipment."
          },
          "shippingService": {
            "$ref": "#/components/schemas/ShippingServiceType",
            "description": "The specific service of the carrier used for this shipment."
          },
          "shippedTime": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which the shipment was shipped."
          },
          "trackingUrl": {
            "type": "string",
            "description": "The tracking URL for a landing page to track the shipment."
          },
          "warehouseId": {
            "$ref": "#/components/schemas/WarehouseIdType"
          },
          "status": {
            "$ref": "#/components/schemas/ApiOrderShipmentStatus",
            "description": "The status for this shipment"
          },
          "shippedItems": {
            "items": {
              "$ref": "#/components/schemas/OrderApiShipmentItem"
            },
            "type": "array",
            "description": "Each shipment item object lists the individual items of a shipment. If a bundle was ordered,\nonly the items of the bundles are listed, but not the bundle product itself."
          }
        },
        "required": [
          "trackingNumber",
          "shippingCarrier",
          "shippingService",
          "shippedTime",
          "warehouseId",
          "status"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ExternalOrderIdType": {
        "type": "string",
        "description": "A unique order reference meaningful to the external system submitting the order."
      },
      "UpdatedDate": {
        "type": "string",
        "format": "date-time",
        "description": "The timestamp when last updated in RFC 3339 format.\ne.g. 2017-07-21T17:32:28Z"
      },
      "OrderApiBundleItem": {
        "properties": {
          "externalProductId": {
            "$ref": "#/components/schemas/ExternalProductIdType"
          },
          "lineItemId": {
            "$ref": "#/components/schemas/LineItemIdType"
          },
          "quantity": {
            "type": "number",
            "format": "double",
            "description": "The amount of the product in this bundle.",
            "minimum": 1
          }
        },
        "required": [
          "externalProductId",
          "quantity"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "OrderApiLineItem": {
        "properties": {
          "externalProductId": {
            "$ref": "#/components/schemas/ExternalProductIdType"
          },
          "lineItemId": {
            "$ref": "#/components/schemas/LineItemIdType"
          },
          "quantity": {
            "type": "number",
            "format": "double",
            "description": "The quantity of the product to ship for this order.",
            "minimum": 1
          },
          "bundleItems": {
            "items": {
              "$ref": "#/components/schemas/OrderApiBundleItem"
            },
            "type": "array",
            "description": "Bundle items of this product in case the product is a bundle.",
            "minItems": 1,
            "maxItems": 20
          }
        },
        "required": [
          "externalProductId",
          "quantity"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "OrderApiStatusModel": {
        "description": "Order details for an order created with Deliverr via the Create Order\nendpoint.",
        "properties": {
          "externalOrderId": {
            "$ref": "#/components/schemas/ExternalOrderIdType"
          },
          "createdAt": {
            "$ref": "#/components/schemas/CreationDate"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/UpdatedDate"
          },
          "source": {
            "type": "string",
            "description": "The name of the system originating the order such as SHOPIFY,\nAMAZON, WEBSITE, WALMART or similar. Free text. This is a vital field\nif the source marketplace restricts which carriers are allowed to be\nused."
          },
          "sourceOrderId": {
            "type": "string",
            "description": "The order id or reference that is meaningful to the buyer and/or the\nsystem sourcing the order."
          },
          "shiptoAddress": {
            "$ref": "#/components/schemas/Address",
            "description": "The destination address for the order."
          },
          "orderDeliveryTime": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime value for when the order should arrive at the buyer's\naddress, based on expectations given to customers or set by the\noriginating marketplace. See the Shipment SLA section of this\nmethod's documentation for details. This date time needs to be in the\nfuture and after orderShipmentTime."
          },
          "orderShipmentTime": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime value for when the order should should be ready for\ncarrier pickup, based on expectations given to customers or set by\nthe originating marketplace. See the Shipment SLA section of this\nmethod's documentation for details. This date time needs to be in the\nfuture and before orderDeliveryTime."
          },
          "lineItems": {
            "items": {
              "$ref": "#/components/schemas/OrderApiLineItem"
            },
            "type": "array",
            "description": "line items to be shipped in this order."
          },
          "orderId": {
            "$ref": "#/components/schemas/OrderIdType"
          },
          "status": {
            "$ref": "#/components/schemas/ApiOrderStatus",
            "description": "Current status of the order."
          },
          "orderShippedTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "UTC datetime value for when entier order (all packages) have been\nreported ready for carrier pickup."
          },
          "orderDeliveredTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "UTC datetime value when the entire order (all packages) were reported\nas completing delivery to the buyer."
          },
          "shipments": {
            "items": {
              "$ref": "#/components/schemas/OrderShipmentObject"
            },
            "type": "array",
            "description": "The shipment details if the order status is SHIPPED."
          },
          "cost": {
            "type": "number",
            "format": "double",
            "description": "The fulfillment order's cost"
          }
        },
        "required": [
          "externalOrderId",
          "source",
          "sourceOrderId",
          "shiptoAddress",
          "lineItems",
          "orderId",
          "status",
          "shipments"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "BadOrderRequestError": {
        "properties": {
          "code": {
            "$ref": "#/components/schemas/StatusCodes.BAD_REQUEST"
          },
          "message": {
            "type": "string",
            "default": "Bad Request"
          },
          "type": {
            "type": "string",
            "description": "Please see <a href='https://support.deliverr.com/hc/en-us/articles/6858275452567'>Products and Order fulfillment</a>\nin the API guide for more information on possible error codes."
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "OrderApiCreateRequest": {
        "properties": {
          "externalOrderId": {
            "$ref": "#/components/schemas/ExternalOrderIdType"
          },
          "createdAt": {
            "$ref": "#/components/schemas/CreationDate"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/UpdatedDate"
          },
          "source": {
            "type": "string",
            "description": "The name of the system originating the order such as SHOPIFY,\nAMAZON, WEBSITE, WALMART or similar. Free text. This is a vital field\nif the source marketplace restricts which carriers are allowed to be\nused."
          },
          "sourceOrderId": {
            "type": "string",
            "description": "The order id or reference that is meaningful to the buyer and/or the\nsystem sourcing the order."
          },
          "shiptoAddress": {
            "$ref": "#/components/schemas/Address",
            "description": "The destination address for the order."
          },
          "orderDeliveryTime": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime value for when the order should arrive at the buyer's\naddress, based on expectations given to customers or set by the\noriginating marketplace. See the Shipment SLA section of this\nmethod's documentation for details. This date time needs to be in the\nfuture and after orderShipmentTime."
          },
          "orderShipmentTime": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime value for when the order should ship by, based on\nexpectations given to customers or set by the originating marketplace.\nThis date time needs to be in the future and before orderDeliveryTime."
          },
          "lineItems": {
            "items": {
              "$ref": "#/components/schemas/OrderApiLineItem"
            },
            "type": "array",
            "description": "line items to be shipped in this order."
          },
          "deliverDays": {
            "type": "number",
            "format": "double",
            "description": "Define the number of days in which this order must be delivered,\ncounting from the date of shipment. See the Shipment SLA section of\nthis method's documentation for details."
          },
          "shipMethod": {
            "type": "string",
            "description": "Text of ship method like 'Standard', 'UPS GROUND', etc.\nSee the Shipment SLA section of this method's documentation\nfor details."
          },
          "orderCreationTime": {
            "type": "string",
            "format": "date-time",
            "description": "UTC datetime value for when the order landed in your system or the originating marketplace."
          }
        },
        "required": [
          "externalOrderId",
          "source",
          "sourceOrderId",
          "shiptoAddress",
          "lineItems"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "IdempotencyHeaderType": {
        "type": "string",
        "example": "52907745-7672-470e-a803-a2f8feb52944",
        "description": "A idempotency header can be used to carry idempotency key in order\nto make the called non-idempotent endpoint fault-tolerant.\nA stringified UUIDv4 is expected.\nSee [RFC 4112](https://tools.ietf.org/html/rfc4122 and https://stripe.com/docs/error-low-level#IdempotencyHeaderType\nfor implementation details. If a response is replayed the header 'idempotent-replayed' is set to 'true'.",
        "pattern": "[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}"
      },
      "LabelGenerationJobResponse": {
        "properties": {
          "message": {
            "type": "string",
            "description": "Message containing info about the created job."
          }
        },
        "required": [
          "message"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "IntegrationChannelId": {
        "type": "string",
        "enum": [
          "shipstation"
        ],
        "nullable": false
      },
      "LabelGenerationJobRequest": {
        "properties": {
          "integrationChannelId": {
            "$ref": "#/components/schemas/IntegrationChannelId",
            "description": "Integration channel that the new orders will be ingested from.",
            "example": "shipstation"
          },
          "estimatedOrderCount": {
            "type": "number",
            "format": "double",
            "description": "Estimated number of new orders to be purchased in this label generation job.",
            "example": 2500
          }
        },
        "required": [
          "integrationChannelId",
          "estimatedOrderCount"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ServiceLevel": {
        "enum": [
          "Standard",
          "Expedited",
          "International"
        ],
        "type": "string"
      },
      "ParcelWeightUnit": {
        "type": "string",
        "enum": [
          "kg",
          "lb"
        ]
      },
      "ParcelPackageDimensions": {
        "properties": {
          "length": {
            "type": "number",
            "format": "float",
            "description": "Length of the package.",
            "example": 12,
            "minimum": 0.01
          },
          "width": {
            "type": "number",
            "format": "float",
            "description": "Width of the package.",
            "example": 3,
            "minimum": 0.01
          },
          "height": {
            "type": "number",
            "format": "float",
            "description": "Height of the package.",
            "example": 5,
            "minimum": 0.01
          },
          "weight": {
            "type": "number",
            "format": "float",
            "description": "Weight of the package.",
            "example": 3,
            "minimum": 0.01
          },
          "lengthUnit": {
            "$ref": "#/components/schemas/LengthUnit",
            "description": "Which length measurement standards are being\nused for the package.",
            "example": "in"
          },
          "weightUnit": {
            "$ref": "#/components/schemas/ParcelWeightUnit",
            "description": "Which weight measurement standards are being\nused for the package.",
            "example": "lb"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "QuoteCreateResponse": {
        "properties": {
          "price": {
            "type": "number",
            "format": "double",
            "description": "The price of the parcel."
          },
          "serviceLevel": {
            "$ref": "#/components/schemas/ServiceLevel",
            "description": "Service levels."
          },
          "billedWeightLbs": {
            "type": "number",
            "format": "double",
            "description": "The billed weight in pounds (lbs)."
          },
          "dimensions": {
            "$ref": "#/components/schemas/ParcelPackageDimensions"
          },
          "warnings": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Warnings received while getting a quote."
          }
        },
        "required": [
          "price",
          "serviceLevel",
          "billedWeightLbs",
          "dimensions",
          "warnings"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "InjectionLocation": {
        "type": "string",
        "enum": [
          "EWR",
          "LAX",
          "DFW"
        ]
      },
      "ParcelCountryCode": {
        "type": "string",
        "enum": [
          "US"
        ],
        "nullable": false
      },
      "ParcelAddress": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of entity.",
            "minLength": 3,
            "maxLength": 35
          },
          "street1": {
            "type": "string",
            "description": "First address line of the address.",
            "maxLength": 50
          },
          "street2": {
            "type": "string",
            "description": "Second address line of the address.",
            "maxLength": 30
          },
          "company": {
            "type": "string",
            "description": "Company name for the entity.",
            "maxLength": 30
          },
          "city": {
            "type": "string",
            "description": "City of the address.",
            "maxLength": 30
          },
          "state": {
            "type": "string",
            "description": "State of the address\n- The 2-letter state postal abbreviation of one of the continental states\n(Alaska [AK], Hawaii [HI], and US Territories are not supported).",
            "maxLength": 30
          },
          "zip": {
            "type": "string",
            "description": "Postal code of the address.",
            "maxLength": 30
          },
          "country": {
            "$ref": "#/components/schemas/ParcelCountryCode",
            "description": "2 character IANA country code of the address."
          },
          "email": {
            "type": "string",
            "description": "Email for the entity",
            "minLength": 3
          },
          "phone": {
            "type": "string",
            "description": "Phone for the entity",
            "minLength": 5,
            "maxLength": 30
          }
        },
        "required": [
          "name",
          "street1",
          "city",
          "state",
          "zip",
          "country"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "QuoteCreateRequest": {
        "properties": {
          "serviceLevel": {
            "$ref": "#/components/schemas/ServiceLevel",
            "description": "Service levels."
          },
          "injectionLocation": {
            "$ref": "#/components/schemas/InjectionLocation",
            "description": "Which injection location will be used."
          },
          "shipToAddress": {
            "$ref": "#/components/schemas/ParcelAddress"
          },
          "dimensions": {
            "$ref": "#/components/schemas/ParcelPackageDimensions"
          }
        },
        "required": [
          "serviceLevel",
          "injectionLocation",
          "shipToAddress",
          "dimensions"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ParcelStatus": {
        "enum": [
          "OK",
          "ERROR"
        ],
        "type": "string"
      },
      "ParcelCreateResponse": {
        "properties": {
          "parcelId": {
            "type": "string",
            "description": "Unique ID used to track the parcel, returned after acquiring a purchase label."
          },
          "customerParcelId": {
            "type": "string",
            "description": "An Order or PO number to associate to the parcel."
          },
          "status": {
            "$ref": "#/components/schemas/ParcelStatus",
            "description": "Status of the purchase request."
          },
          "errors": {
            "type": "string",
            "description": "Used to get the error details."
          },
          "shippingLabelUrl": {
            "type": "string",
            "description": "URL used to download the label data."
          },
          "packageTrackingUrl": {
            "type": "string",
            "description": "URL that can be used to track the package."
          },
          "price": {
            "type": "number",
            "format": "double",
            "description": "The price of the parcel."
          },
          "serviceLevel": {
            "$ref": "#/components/schemas/ServiceLevel",
            "description": "Service levels."
          },
          "customerCustomField": {
            "type": "string",
            "description": "An optional field to input additional information about the parcel."
          }
        },
        "required": [
          "customerParcelId",
          "status",
          "serviceLevel"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "BadParcelRequestError": {
        "properties": {
          "code": {
            "$ref": "#/components/schemas/StatusCodes.BAD_REQUEST"
          },
          "message": {
            "type": "string",
            "default": "Bad Request"
          },
          "type": {
            "type": "string",
            "description": "An optional error message for incorrectly formatted requests to indicate why the\nrequest failed.\nExample:\n\"child \\\"dimensions\\' fails because [child \\\"weightUnit\\' fails because [\\\"weightUnit\\\" must be one of [lb, kg]]]\"\nThis indicates that the request failed because the weightUnit that was provided is not supported."
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ParcelUnprocessableEntityError": {
        "properties": {
          "code": {
            "$ref": "#/components/schemas/StatusCodes.UNPROCESSABLE_ENTITY"
          },
          "message": {
            "type": "string",
            "description": "An error message for incorrectly formatted requests to indicate why the\nrequest failed.\nExample:\n\"{\\ \"fields\\\": {\\ \"parcel.shipToAddress.phone\\\": \"message\\\": \\\"maxLength 30\\\",\\ \"value\\\": \\ \"12345678901234567890123456789012345\\ \"33}\nPlease refer to Deliverr API documentation for proper usage\"\nThis indicates that the request failed because the phone number that was provided is too long.",
            "default": ""
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ShippingLabelFormat": {
        "enum": [
          "PNG",
          "ZPL203"
        ],
        "type": "string"
      },
      "ParcelCreateRequest": {
        "properties": {
          "customerParcelId": {
            "type": "string",
            "description": "An Order or PO number to associate to the parcel."
          },
          "serviceLevel": {
            "$ref": "#/components/schemas/ServiceLevel",
            "description": "Service levels."
          },
          "injectionLocation": {
            "$ref": "#/components/schemas/InjectionLocation",
            "description": "Which injection location will be used."
          },
          "shipToAddress": {
            "$ref": "#/components/schemas/ParcelAddress"
          },
          "returnAddress": {
            "$ref": "#/components/schemas/ParcelAddress"
          },
          "pickupDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "UTC timestamp of when the package is expected to arrive at the injection location."
          },
          "dimensions": {
            "$ref": "#/components/schemas/ParcelPackageDimensions"
          },
          "customerCustomField": {
            "type": "string",
            "description": "An optional field to input additional information about the parcel."
          },
          "labelFormat": {
            "$ref": "#/components/schemas/ShippingLabelFormat",
            "description": "File format to use for shipping label."
          },
          "skipAddressValidation": {
            "type": "boolean",
            "description": "Skip address validation."
          }
        },
        "required": [
          "customerParcelId",
          "shipToAddress",
          "dimensions"
        ],
        "type": "object",
        "additionalProperties": {}
      },
      "ExpiredTrackingData": {
        "properties": {
          "labelId": {
            "type": "string",
            "description": "Unique ID for the label."
          },
          "trackingCode": {
            "type": "string",
            "description": "The tracking code for the package."
          },
          "shippingLabelUrl": {
            "type": "string",
            "description": "URL used to download the label data."
          },
          "packageTrackingUrl": {
            "type": "string",
            "description": "URL that can be used to track the package."
          },
          "shippingMethod": {
            "type": "string",
            "description": "The shipping method used to ship the package."
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "ParcelGetResponse": {
        "properties": {
          "parcelId": {
            "type": "string",
            "description": "Unique ID used to track the parcel, returned after acquiring a purchase label."
          },
          "customerReferenceId": {
            "type": "string",
            "description": "The customer reference id."
          },
          "status": {
            "type": "string",
            "description": "Status of the purchase request."
          },
          "errors": {
            "type": "string",
            "description": "Errors associated with the parcel."
          },
          "errorMessage": {
            "type": "string",
            "description": "Error messages associated with the parcel."
          },
          "shippingLabelUrl": {
            "type": "string",
            "description": "URL used to download the label data."
          },
          "packageTrackingUrl": {
            "type": "string",
            "description": "URL that can be used to track the package."
          },
          "price": {
            "type": "number",
            "format": "double",
            "description": "The price of the parcel."
          },
          "serviceLevel": {
            "type": "string",
            "description": "Service levels."
          },
          "customerCustomField": {
            "type": "string",
            "description": "An optional field to input additional information about the parcel."
          },
          "carrierCode": {
            "type": "string",
            "description": "The carrier code for the package."
          },
          "trackingCode": {
            "type": "string",
            "description": "The tracking code for the package."
          },
          "billedWeightLbs": {
            "type": "number",
            "format": "double",
            "description": "The billed weight in pounds (lbs)."
          },
          "dimensions": {
            "$ref": "#/components/schemas/ParcelPackageDimensions"
          },
          "expiredTrackingData": {
            "items": {
              "$ref": "#/components/schemas/ExpiredTrackingData"
            },
            "type": "array"
          }
        },
        "required": [
          "status"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "TrackingResultTimestamps": {
        "properties": {
          "labelTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "UTC timestamp of when a label was printed for the package."
          },
          "arrivalScanTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "UTC timestamp of the arrival scan."
          },
          "facilityTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "UTC timestamp of when the package arrived at the facility."
          },
          "attemptedDeliveryTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "UTC timestamp of when delivery was attempted for the package."
          },
          "deliveryTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "UTC timestamp of when the package was delivered."
          },
          "estimatedDeliveryTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "UTC timestamp of when the package is expected to be delivered."
          },
          "lastTrackingEventTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "UTC timestamp of the last tracking event for the package."
          },
          "lastTrackingIngestionTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "UTC timestamp of when the last tracking event for the package was ingested."
          }
        },
        "required": [
          "labelTime",
          "arrivalScanTime",
          "facilityTime",
          "attemptedDeliveryTime",
          "deliveryTime",
          "estimatedDeliveryTime",
          "lastTrackingEventTime",
          "lastTrackingIngestionTime"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ParcelTrackingGetResponse": {
        "properties": {
          "parcelId": {
            "type": "string",
            "description": "Unique ID used to track the parcel, returned after acquiring a purchase label."
          },
          "customerReferenceId": {
            "type": "string",
            "description": "The customer reference id."
          },
          "customerCustomField": {
            "type": "string",
            "description": "An optional field to input additional information about the parcel."
          },
          "status": {
            "type": "string",
            "description": "Status of the tracking request."
          },
          "errors": {
            "type": "string",
            "description": "Errors associated with the response."
          },
          "errorMessage": {
            "type": "string",
            "description": "Error messages associated with the response."
          },
          "packageTrackingUrl": {
            "type": "string",
            "description": "URL that can be used to track the package."
          },
          "shippingLabelUrl": {
            "type": "string",
            "description": "URL used to download the label data."
          },
          "trackingCode": {
            "type": "string",
            "description": "The tracking code for the package."
          },
          "carrierCode": {
            "type": "string",
            "description": "The carrier code for the package."
          },
          "eventTimestamps": {
            "$ref": "#/components/schemas/TrackingResultTimestamps"
          },
          "expiredTrackingData": {
            "items": {
              "$ref": "#/components/schemas/ExpiredTrackingData"
            },
            "type": "array"
          }
        },
        "required": [
          "status",
          "eventTimestamps"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "BundleMembership": {
        "properties": {
          "bundleId": {
            "$ref": "#/components/schemas/BundleIdType"
          },
          "quantity": {
            "type": "number",
            "format": "double",
            "description": "The number of units of this product in the bundle."
          }
        },
        "required": [
          "bundleId",
          "quantity"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "UnId": {
        "enum": [
          "UN3481",
          "UN3091",
          "UN3480",
          "UN3090"
        ],
        "type": "string"
      },
      "HazmatStatus": {
        "enum": [
          "PENDING",
          "APPROVED",
          "REJECTED",
          "INCOMPLETE"
        ],
        "type": "string"
      },
      "HazmatInfo": {
        "properties": {
          "hazmatCode": {
            "$ref": "#/components/schemas/UnId",
            "description": "A four-digit number that identifies hazardous materials, and articles."
          },
          "hazmatStatus": {
            "$ref": "#/components/schemas/HazmatStatus"
          }
        },
        "required": [
          "hazmatCode",
          "hazmatStatus"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "BarcodeType": {
        "type": "string",
        "description": "The value of an barcode.",
        "minLength": 6,
        "maxLength": 255
      },
      "CategoryEnum": {
        "enum": [
          "ADULT",
          "APPAREL_FABRIC_PLUSH_TEXTILES",
          "BABY",
          "FRAGILE_GLASS",
          "NON_GLASS_LIQUIDS",
          "OTHER",
          "PERFORATED_PACKAGING",
          "POWDER_PELLETS_GRANULAR",
          "SHARP",
          "SMALL"
        ],
        "type": "string"
      },
      "ProductCustomsInfo": {
        "properties": {
          "customsDescription": {
            "type": "string",
            "description": "Customs description - should reflect usage and materials.\nNeeded only for international shipping.",
            "minLength": 1,
            "maxLength": 50
          },
          "harmonizedCode": {
            "type": "string",
            "description": "Harmonized tariff code. Needed only for international shipping.",
            "pattern": "^[0-9]{10}$"
          },
          "originCountry": {
            "$ref": "#/components/schemas/CountryCode",
            "description": "The 2-letter IANA code for the product's country of origin.\nNeeded only for international shipping."
          },
          "customsValue": {
            "type": "number",
            "format": "double",
            "description": "The value of one unit of this product in USD for the purpose of customs declaration.\nNeeded only for international shipping.",
            "minimum": 0.01
          }
        },
        "required": [
          "customsDescription",
          "harmonizedCode",
          "originCountry",
          "customsValue"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ApiProductModelResponse": {
        "properties": {
          "externalProductId": {
            "$ref": "#/components/schemas/ExternalProductIdType",
            "description": "A permanent unique reference for this product generated by and meaningful to the API user.\nThis value will be used when sending orders to identify the product to ship,\nwhen reporting products shipped, and when reporting inventory levels or updates.\nThis value should be chosen to represent a PHYSICAL product in the external system, not\na virtual product, bundle or kit, unless the bundle or kit is inbounded as a single barcoded product.\nThis value must be unique among all products created via API."
          },
          "title": {
            "type": "string",
            "description": "The product title or short description. Should represent a single line of text suitable to\nidentify the product or for search purposes.",
            "minLength": 1,
            "maxLength": 255
          },
          "sku": {
            "$ref": "#/components/schemas/SkuType"
          },
          "category": {
            "$ref": "#/components/schemas/CategoryEnum",
            "description": "The product category or type. This value, if supplied, is used to help manage product\nhandling and shipping at warehouses. See the\n<A HREF='https://support.deliverr.com/hc/en-us/articles/4406716440599-Product-Categories' >\nProduct Categories</A> help article for more details."
          },
          "height": {
            "type": "number",
            "format": "double",
            "description": "Height in inches of the product by itself."
          },
          "width": {
            "type": "number",
            "format": "double",
            "description": "Width in inches by itself."
          },
          "length": {
            "type": "number",
            "format": "double",
            "description": "Length in inches by itself."
          },
          "weight": {
            "type": "number",
            "format": "double",
            "description": "Weight in pounds by itself."
          },
          "international": {
            "$ref": "#/components/schemas/ProductCustomsInfo",
            "description": "Customs description - should reflect usage and materials.\nNeeded only for international shipping."
          },
          "productId": {
            "$ref": "#/components/schemas/ProductIdType"
          },
          "bundleMemberships": {
            "items": {
              "$ref": "#/components/schemas/BundleMembership"
            },
            "type": "array",
            "description": "The bundles that this product is a part of."
          },
          "dimsLocked": {
            "type": "boolean",
            "description": "**true** if the dimensions and weight of the item are verified and trusted.\nMust be true for non-zero inventory levels to be reported. If true, item dimensions\nand weight can no longer be updated via the API."
          },
          "createdAt": {
            "$ref": "#/components/schemas/CreationDate"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/UpdatedDate"
          },
          "hazmatInfo": {
            "items": {
              "$ref": "#/components/schemas/HazmatInfo"
            },
            "type": "array",
            "description": "Array of hazmat UN hazmat codes assigned to this product. Read-only. Hazmat types can\ncurrently only be set in the web portal UI\nor through a support request and must go through a documentation approval process before hazmat\ncategorized items can be inbounded or shipped. Currently only\nused for restricted battery type support."
          },
          "barcodes": {
            "items": {
              "$ref": "#/components/schemas/BarcodeType"
            },
            "type": "array",
            "description": "The list of associated barcodes for this product."
          }
        },
        "required": [
          "externalProductId",
          "title",
          "sku",
          "category",
          "productId",
          "dimsLocked",
          "createdAt",
          "updatedAt",
          "hazmatInfo",
          "barcodes"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "MyPartial_ProductCustomsInfo_": {
        "properties": {
          "customsDescription": {
            "type": "string",
            "description": "Customs description - should reflect usage and materials.\nNeeded only for international shipping.",
            "minLength": 1,
            "maxLength": 50
          },
          "harmonizedCode": {
            "type": "string",
            "description": "Harmonized tariff code. Needed only for international shipping.",
            "pattern": "^[0-9]{10}$"
          },
          "originCountry": {
            "$ref": "#/components/schemas/CountryCode",
            "description": "The 2-letter IANA code for the product's country of origin.\nNeeded only for international shipping."
          },
          "customsValue": {
            "type": "number",
            "format": "double",
            "description": "The value of one unit of this product in USD for the purpose of customs declaration.\nNeeded only for international shipping.",
            "minimum": 0.01
          }
        },
        "type": "object",
        "description": "Customs description - should reflect usage and materials.\nNeeded only for international shipping."
      },
      "ProductCustomsInfoUpdate": {
        "$ref": "#/components/schemas/MyPartial_ProductCustomsInfo_"
      },
      "ApiUpdateProductModel": {
        "properties": {
          "title": {
            "type": "string",
            "description": "The product title or short description. Should represent a single line of text suitable to\nidentify the product or for search purposes.",
            "minLength": 1,
            "maxLength": 255
          },
          "sku": {
            "$ref": "#/components/schemas/SkuType"
          },
          "category": {
            "$ref": "#/components/schemas/CategoryEnum",
            "description": "The product category or type. This value, if supplied, is used to help manage product\nhandling and shipping at warehouses. See the\n<A HREF='https://support.deliverr.com/hc/en-us/articles/4406716440599-Product-Categories' >\nProduct Categories</A> help article for more details."
          },
          "height": {
            "type": "number",
            "format": "double",
            "description": "height in inches of the product by itself.\nWill be ignored if provided and dimsLocked value is true from ProductModel."
          },
          "width": {
            "type": "number",
            "format": "double",
            "description": "Width in inches by itself.\nWill be ignored if provided and dimsLocked value is true from ProductModel."
          },
          "length": {
            "type": "number",
            "format": "double",
            "description": "Length in inches by itself.\nWill be ignored if provided and dimsLocked value is true from ProductModel."
          },
          "weight": {
            "type": "number",
            "format": "double",
            "description": "Weight in pounds by itself.\nWill be ignored if provided and dimsLocked value is true from ProductModel."
          },
          "international": {
            "$ref": "#/components/schemas/ProductCustomsInfoUpdate"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "LotTrackingDetails": {
        "properties": {
          "expirationDate": {
            "type": "string",
            "description": "Timestamp for when this quantity will expire. RFC 3339 format, e.g., 2017-07-21T17:32:28Z.",
            "format": "date-time"
          },
          "availableUnits": {
            "type": "number",
            "format": "double",
            "description": "The number of units available for sale - not reserved for open orders,\nbelonging to products whose dimsLocked field is true, that are in a pickable and shippable\nstate at connected warehouses."
          }
        },
        "required": [
          "availableUnits"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ApiInventoryResponseModel": {
        "properties": {
          "productId": {
            "$ref": "#/components/schemas/ProductIdType"
          },
          "availableUnits": {
            "type": "integer",
            "format": "int32",
            "description": "The number of units available for sale - not reserved for open orders,\nbelonging to products whose dimsLocked field is true, that are in a pickable and shippable\nstate at connected warehouses.",
            "minLength": 0
          },
          "lotTrackingDetails": {
            "items": {
              "$ref": "#/components/schemas/LotTrackingDetails"
            },
            "type": "array"
          }
        },
        "required": [
          "productId",
          "availableUnits"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "Limit": {
        "type": "integer",
        "format": "int32",
        "description": "A limit to the number of rows returned from a query",
        "minLength": 1,
        "maxLength": 100
      },
      "Offset": {
        "type": "integer",
        "format": "int32",
        "description": "Number to omit a specified number of rows before the beginning of the result set",
        "minLength": 0
      },
      "InventoryPool": {
        "enum": [
          "DEFAULT",
          "UNALLOCATED",
          "STORAGE"
        ],
        "type": "string"
      },
      "WarehouseDetails": {
        "properties": {
          "availableUnits": {
            "type": "integer",
            "format": "int32",
            "description": "The number of units available for sale - not reserved for open orders,\nbelonging to products whose dimsLocked field is true, that are in a pickable and shippable\nstate at connected warehouses.",
            "minLength": 0
          },
          "warehouseId": {
            "$ref": "#/components/schemas/WarehouseIdType",
            "description": "The warehouse identifier from which the shipment was sent."
          }
        },
        "required": [
          "availableUnits",
          "warehouseId"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ApiWarehouseResponseModel": {
        "properties": {
          "productId": {
            "$ref": "#/components/schemas/ProductIdType"
          },
          "warehouseDetails": {
            "items": {
              "$ref": "#/components/schemas/WarehouseDetails"
            },
            "type": "array"
          }
        },
        "required": [
          "productId"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "BarcodeOption": {
        "properties": {
          "barcodeType": {
            "type": "string",
            "enum": [
              "PRODUCT",
              "MANUFACTURER",
              "AMAZON"
            ],
            "description": "<B>Type Descriptions:</B><BR>\n<table>\n<thead>\n<tr>\n<th>barcodeType</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AMAZON</td>\n<td>Any ASIN or FSKU value</td>\n</tr>\n<tr>\n<td>MANUFACTURER</td>\n<td>Any of the following types: UPC/EAN/GTIN-14/ISBN</td>\n</tr>\n<tr>\n<td>PRODUCT</td>\n<td>The value of the productId of a created Product record.\nAlso referred to in some documentation as the DSKU. Because this value is guaranteed to be globally unique,\nit may be assigned internally without a specific API request.</td>\n</tr>\n</tbody>\n</table>"
          },
          "barcodeValue": {
            "$ref": "#/components/schemas/BarcodeType",
            "description": "The value read by a scanner of this barcode"
          }
        },
        "required": [
          "barcodeType",
          "barcodeValue"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ApiProductModel": {
        "properties": {
          "externalProductId": {
            "$ref": "#/components/schemas/ExternalProductIdType",
            "description": "A permanent unique reference for this product generated by and meaningful to the API user.\nThis value will be used when sending orders to identify the product to ship,\nwhen reporting products shipped, and when reporting inventory levels or updates.\nThis value should be chosen to represent a PHYSICAL product in the external system, not\na virtual product, bundle or kit, unless the bundle or kit is inbounded as a single barcoded product.\nThis value must be unique among all products created via API."
          },
          "title": {
            "type": "string",
            "description": "The product title or short description. Should represent a single line of text suitable to\nidentify the product or for search purposes.",
            "minLength": 1,
            "maxLength": 255
          },
          "sku": {
            "$ref": "#/components/schemas/SkuType"
          },
          "category": {
            "$ref": "#/components/schemas/CategoryEnum",
            "description": "The product category or type. This value, if supplied, is used to help manage product\nhandling and shipping at warehouses. See the\n<A HREF='https://support.deliverr.com/hc/en-us/articles/4406716440599-Product-Categories' >\nProduct Categories</A> help article for more details."
          },
          "height": {
            "type": "number",
            "format": "double",
            "description": "Height in inches of the product by itself."
          },
          "width": {
            "type": "number",
            "format": "double",
            "description": "Width in inches by itself."
          },
          "length": {
            "type": "number",
            "format": "double",
            "description": "Length in inches by itself."
          },
          "weight": {
            "type": "number",
            "format": "double",
            "description": "Weight in pounds by itself."
          },
          "international": {
            "$ref": "#/components/schemas/ProductCustomsInfo",
            "description": "Customs description - should reflect usage and materials.\nNeeded only for international shipping."
          }
        },
        "required": [
          "externalProductId",
          "title",
          "sku",
          "category"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ReportStatus": {
        "enum": [
          "PENDING",
          "SUCCESS",
          "ERROR"
        ],
        "type": "string"
      },
      "Report": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ReportStatus",
            "description": "<ol>\n  <li>PENDING: The report is still being generated</li>\n  <li>SUCCESS: Report has been generated, use the url field to download the report as a CSV file</li>\n  <li>ERROR: There was an issue while creating this report, see errorMessage field for details</li>\n</ol>"
          },
          "urlExpiration": {
            "type": "string",
            "format": "date-time",
            "description": "date-time of download url expiration in GMT."
          },
          "url": {
            "type": "string",
            "description": "download report as a csv using this URL. Note that this URL will expire at the urlExpiration time."
          },
          "errorMessage": {
            "type": "string",
            "description": "If status is ERROR, a description of the error."
          }
        },
        "required": [
          "status"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ReportGenerationResponse": {
        "properties": {
          "reportReference": {
            "type": "string",
            "description": "A reference for polling the status of the report."
          }
        },
        "required": [
          "reportReference"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "SellerReportType": {
        "enum": [
          "Billing-Invoices",
          "Billing-Credits_Balance",
          "Inbounds-Packages",
          "Inbounds-Shipments",
          "Orders-All_Orders",
          "Orders-Shipments",
          "Inventory-Levels_Today",
          "Inventory-Units_In_Long_Term_Storage",
          "Inbounds-Monthly_Reconciliation",
          "Inbounds-Shipping_Plan_Reconciliation",
          "Inbounds-Inventory_Reconciliation",
          "Products-All_SKUs_With_Alias_Counts",
          "Products-Available_SKUs_With_No_Aliases",
          "Products-Available_SKUs_With_Alias_Counts",
          "Products-SKUs_With_Linked_Aliases",
          "Returns-All_Returns",
          "Returns-All_SKUs",
          "Claims-Claims_Submitted",
          "Pricing-Fulfillment_Fees",
          "Incident-Impact_Report",
          "Transfers-All_Transfers"
        ],
        "type": "string"
      },
      "ReportGenerationRequest": {
        "properties": {
          "reportType": {
            "$ref": "#/components/schemas/SellerReportType"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "The start date for the data in the report."
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "The end date for the data in the report."
          }
        },
        "required": [
          "reportType"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ReturnStatus": {
        "enum": [
          "CREATED",
          "BUYER_SHIPPED",
          "SHIPPED",
          "BUYER_DELIVERED",
          "QC_RECEIVED",
          "QC_PROCESSED",
          "QC_SHIPPED",
          "CANCELLED",
          "COMPLETED",
          "RETURNED_TO_SENDER",
          "REQUESTED",
          "RECEIVED_FOR_PROCESSING",
          "PROCESSED",
          "AUTO_CANCELLED",
          "REJECTED",
          "RECEIVED_AT_DROPPOINT"
        ],
        "type": "string"
      },
      "ReturnsSourceAddress": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of entity."
          },
          "street1": {
            "type": "string",
            "description": "First address line of the address."
          },
          "street2": {
            "type": "string",
            "description": "Second address line of the address."
          },
          "company": {
            "type": "string",
            "description": "Company name for the entity."
          },
          "city": {
            "type": "string",
            "description": "City of the address."
          },
          "state": {
            "type": "string",
            "description": "State or region of the address - if a US countryCode, must be the\n2-letter state postal abbreviation."
          },
          "zip": {
            "type": "string",
            "description": "Postal code of the address."
          },
          "phone": {
            "type": "string",
            "description": "Contact number of customer."
          },
          "country": {
            "type": "string",
            "description": "Country of the address."
          },
          "isResidential": {
            "type": "boolean",
            "description": "If the address is a residential address."
          }
        },
        "required": [
          "city",
          "zip",
          "country"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ReturnsDestinationAddress": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of entity."
          },
          "street1": {
            "type": "string",
            "description": "First address line of the address."
          },
          "street2": {
            "type": "string",
            "description": "Second address line of the address."
          },
          "company": {
            "type": "string",
            "description": "Company name for the entity."
          },
          "city": {
            "type": "string",
            "description": "City of the address."
          },
          "state": {
            "type": "string",
            "description": "State or region of the address - if a US countryCode, must be the\n2-letter state postal abbreviation."
          },
          "zip": {
            "type": "string",
            "description": "Postal code of the address."
          },
          "phone": {
            "type": "string",
            "description": "Contact number of customer."
          },
          "country": {
            "type": "string",
            "description": "Country of the address."
          },
          "isResidential": {
            "type": "boolean",
            "description": "If the address is a residential address."
          }
        },
        "required": [
          "name",
          "street1",
          "city",
          "state",
          "zip",
          "country"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ReturnsApiCustomer": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the customer."
          },
          "email": {
            "type": "string",
            "description": "Valid email of the customer."
          },
          "phone": {
            "type": "string",
            "description": "Valid contact phone number of the customer."
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "Carrier": {
        "type": "string"
      },
      "ReturnsPublicApiCarriers": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/Carrier"
          },
          {
            "type": "string",
            "enum": [
              "OTHER"
            ]
          }
        ]
      },
      "TrackingStatus": {
        "enum": [
          "PRE_TRANSIT",
          "IN_TRANSIT",
          "OUT_FOR_DELIVERY",
          "DELIVERED",
          "RETURN_TO_SENDER",
          "FAILURE",
          "UNKNOWN"
        ],
        "type": "string"
      },
      "ShippingMethod": {
        "type": "string"
      },
      "ReturnsPublicApiShippingMethod": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/ShippingMethod"
          },
          {
            "type": "string",
            "enum": [
              "OTHER"
            ]
          }
        ]
      },
      "PackageDimensions": {
        "properties": {
          "length": {
            "type": "number",
            "format": "float",
            "description": "Length of the package.",
            "example": 12,
            "minimum": 0.01
          },
          "width": {
            "type": "number",
            "format": "float",
            "description": "Width of the package.",
            "example": 3,
            "minimum": 0.01
          },
          "height": {
            "type": "number",
            "format": "float",
            "description": "Height of the package.",
            "example": 5,
            "minimum": 0.01
          },
          "weight": {
            "type": "number",
            "format": "float",
            "description": "Weight of the package.",
            "example": 3,
            "minimum": 0.01
          },
          "dimensionUnit": {
            "$ref": "#/components/schemas/LengthUnit",
            "description": "Which length measurement standards are being\nused for the package.",
            "example": "in"
          },
          "weightUnit": {
            "$ref": "#/components/schemas/WeightUnit",
            "description": "Which weight measurement standards are being\nused for the package.",
            "example": "lb"
          }
        },
        "type": "object",
        "additionalProperties": false
      },
      "ReturnsApiShippingLabel": {
        "properties": {
          "carrier": {
            "$ref": "#/components/schemas/ReturnsPublicApiCarriers",
            "description": "Carrier delivering the package."
          },
          "trackingCode": {
            "type": "string",
            "description": "Carrier tracking code."
          },
          "trackingUrl": {
            "type": "string",
            "description": "Tracking url for shipping label."
          },
          "trackingStatus": {
            "$ref": "#/components/schemas/TrackingStatus",
            "description": "Tracking status for shipping label."
          },
          "labelFormat": {
            "type": "string",
            "enum": [
              "PDF",
              "PNG",
              "ZPL203"
            ],
            "description": "Carrier label format."
          },
          "labelUrl": {
            "type": "string",
            "description": "Carrier label download url label format is required when passing label url."
          },
          "shippingMethod": {
            "$ref": "#/components/schemas/ReturnsPublicApiShippingMethod",
            "description": "Carrier shipping service selected for the shipment."
          },
          "packageDimensions": {
            "$ref": "#/components/schemas/PackageDimensions",
            "description": "Shipping package dimensions."
          }
        },
        "required": [
          "carrier",
          "trackingCode"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ReturnsPublicApiMarketplace": {
        "enum": [
          "AIRSHOP",
          "AMAZON",
          "ARTEZA",
          "BIGCOMMERCE",
          "DELIVERR",
          "EBAY",
          "ETSY",
          "FACEBOOK",
          "GOOGLE",
          "INSTAGRAM",
          "JANE",
          "JCPENNEY",
          "KROGER",
          "MAGENTO",
          "NEWEGG",
          "OVERSTOCK",
          "SHOPIFY",
          "SKUPREME",
          "TARGET",
          "WALMART",
          "WISH",
          "WOOCOMMERCE",
          "OTHER"
        ],
        "type": "string"
      },
      "ReturnsApiMarketplaceOrder": {
        "properties": {
          "marketplaceOrderId": {
            "type": "string",
            "description": "Order id in the marketplace."
          },
          "marketplaceName": {
            "$ref": "#/components/schemas/ReturnsPublicApiMarketplace",
            "description": "Name of the marketplace."
          }
        },
        "required": [
          "marketplaceOrderId",
          "marketplaceName"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ReturnsProductIdentifiers": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "DELIVERR_SKU",
              "FNSKU",
              "SHOPIFY_PRODUCT_ID",
              "PRODUCT_NAME",
              "SHOPIFY_VARIANT_ID",
              "SKU",
              "UPC",
              "LOT_NUMBER",
              "OTHER"
            ]
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ReturnsApiProductDetail": {
        "properties": {
          "productName": {
            "type": "string",
            "description": "Name of the product in the marketplace."
          },
          "identifiers": {
            "items": {
              "$ref": "#/components/schemas/ReturnsProductIdentifiers"
            },
            "type": "array",
            "description": "Unique Identifiers for the product it is dependent on the marketplace."
          },
          "dimensions": {
            "$ref": "#/components/schemas/PackageDimensions",
            "description": "Dimensions of individual product."
          }
        },
        "required": [
          "productName",
          "identifiers"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "QcItemStatus": {
        "enum": [
          "INSPECTION_REJECTED",
          "INSPECTION_APPROVED",
          "LOST_DURING_INSPECTION",
          "LOST_BY_CARRIER",
          "DONATED",
          "DESTROYED",
          "NOT_RECEIVED",
          "RETURN_TO_SELLER",
          "LIQUIDATED"
        ],
        "type": "string"
      },
      "ReturnsApiInspectionDetail": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/QcItemStatus",
            "description": "Inspection status of a product item."
          },
          "quantity": {
            "type": "number",
            "format": "double",
            "description": "Number of items belonging to a inspection status."
          }
        },
        "required": [
          "status",
          "quantity"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ReturnsApiInspectedReturnItem": {
        "properties": {
          "product": {
            "$ref": "#/components/schemas/ReturnsApiProductDetail"
          },
          "expectedQuantity": {
            "type": "number",
            "format": "double",
            "description": "Quantity of product send when creating return order."
          },
          "inspectionDetails": {
            "items": {
              "$ref": "#/components/schemas/ReturnsApiInspectionDetail"
            },
            "type": "array",
            "description": "Inspection details once the product is scan\nyou can get more or less than expectedQuantity in this payload."
          }
        },
        "required": [
          "product",
          "expectedQuantity",
          "inspectionDetails"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ReturnsApiOrder": {
        "properties": {
          "id": {
            "type": "number",
            "format": "double",
            "description": "Shopify's return order id."
          },
          "status": {
            "$ref": "#/components/schemas/ReturnStatus"
          },
          "deliverrReturnOrderUrl": {
            "type": "string",
            "description": "Link to deliverr's ui return order page."
          },
          "sourceAddress": {
            "$ref": "#/components/schemas/ReturnsSourceAddress",
            "description": "Return shipment origin address\ncould be customer's or aggregator facility's address."
          },
          "destinationAddress": {
            "$ref": "#/components/schemas/ReturnsDestinationAddress",
            "description": "Shopify's return processing facility address."
          },
          "customer": {
            "$ref": "#/components/schemas/ReturnsApiCustomer"
          },
          "shippingLabels": {
            "items": {
              "$ref": "#/components/schemas/ReturnsApiShippingLabel"
            },
            "type": "array",
            "description": "For more than one package send multiple shipping label."
          },
          "marketplaceOrder": {
            "$ref": "#/components/schemas/ReturnsApiMarketplaceOrder"
          },
          "rma": {
            "type": "string",
            "description": "Return merchandise authorization unique id generated for returns\nmake sure it is in the shipping label."
          },
          "externalReturnId": {
            "type": "string",
            "description": "Unique identifier for return in RMT."
          },
          "returnItems": {
            "items": {
              "$ref": "#/components/schemas/ReturnsApiInspectedReturnItem"
            },
            "type": "array",
            "description": "Items being returned."
          }
        },
        "required": [
          "id",
          "status",
          "deliverrReturnOrderUrl",
          "destinationAddress",
          "shippingLabels",
          "marketplaceOrder",
          "rma",
          "externalReturnId",
          "returnItems"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ReturnsApiReturnItem": {
        "properties": {
          "product": {
            "$ref": "#/components/schemas/ReturnsApiProductDetail"
          },
          "quantity": {
            "type": "number",
            "format": "double",
            "description": "Quantity of product send when creating return order."
          }
        },
        "required": [
          "product",
          "quantity"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "ReturnsApiCreateOrderRequest": {
        "properties": {
          "sourceAddress": {
            "$ref": "#/components/schemas/ReturnsSourceAddress",
            "description": "Return shipment origin address\ncould be customer's or aggregator facility's address."
          },
          "destinationAddress": {
            "$ref": "#/components/schemas/ReturnsDestinationAddress",
            "description": "Shopify's return processing facility address."
          },
          "customer": {
            "$ref": "#/components/schemas/ReturnsApiCustomer"
          },
          "shippingLabels": {
            "items": {
              "$ref": "#/components/schemas/ReturnsApiShippingLabel"
            },
            "type": "array",
            "description": "For more than one package send multiple shipping label."
          },
          "marketplaceOrder": {
            "$ref": "#/components/schemas/ReturnsApiMarketplaceOrder"
          },
          "rma": {
            "type": "string",
            "description": "Return merchandise authorization unique id generated for returns\nmake sure it is in the shipping label."
          },
          "externalReturnId": {
            "type": "string",
            "description": "Unique identifier for return in RMT."
          },
          "returnItems": {
            "items": {
              "$ref": "#/components/schemas/ReturnsApiReturnItem"
            },
            "type": "array",
            "description": "Items being returned."
          },
          "isPurchaseLabel": {
            "type": "boolean",
            "description": "Whether to purchase label for return package(s)"
          }
        },
        "required": [
          "destinationAddress",
          "marketplaceOrder",
          "rma",
          "externalReturnId",
          "returnItems"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "StorageItem": {
        "properties": {
          "dsku": {
            "type": "string"
          },
          "lotNumber": {
            "type": "string"
          },
          "expirationDateHasDay": {
            "type": "boolean"
          },
          "expirationDate": {
            "type": "string"
          },
          "storageInboundOrderId": {
            "type": "number",
            "format": "double"
          },
          "storageTransferOrderId": {
            "type": "number",
            "format": "double"
          },
          "expectedQty": {
            "type": "number",
            "format": "double"
          },
          "receivedQty": {
            "type": "number",
            "format": "double"
          },
          "damagedQty": {
            "type": "number",
            "format": "double"
          },
          "discrepantUnits": {
            "type": "number",
            "format": "double"
          },
          "caseQty": {
            "type": "number",
            "format": "double"
          },
          "caseHeight": {
            "type": "number",
            "format": "double"
          },
          "caseLength": {
            "type": "number",
            "format": "double"
          },
          "caseWidth": {
            "type": "number",
            "format": "double"
          },
          "caseWeight": {
            "type": "number",
            "format": "double"
          },
          "id": {
            "type": "number",
            "format": "double"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "dsku",
          "expectedQty",
          "id",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "DeliverrAddress": {
        "properties": {
          "name": {
            "type": "string"
          },
          "company": {
            "type": "string"
          },
          "street1": {
            "type": "string"
          },
          "street2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "isResidential": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "street1",
          "city",
          "zip",
          "state",
          "country"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "InboundStatus": {
        "enum": [
          "IN_DRAFT",
          "READY_TO_SHIP",
          "RECEIVING",
          "COMPLETE",
          "UNKNOWN",
          "CREATED"
        ],
        "type": "string"
      },
      "ShipmentType": {
        "enum": [
          "FLOOR_LOADED_CONTAINER",
          "PALLETIZED"
        ],
        "type": "string"
      },
      "ContainerSize": {
        "enum": [
          "GENERAL_20FT",
          "GENERAL_40FT"
        ],
        "type": "string"
      },
      "StorageApiInboundResponse": {
        "properties": {
          "id": {
            "type": "number",
            "format": "double",
            "description": "unique Id for storage Inbound"
          },
          "storageItems": {
            "items": {
              "$ref": "#/components/schemas/StorageItem"
            },
            "type": "array",
            "description": "Details of Items for StorageInbound"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date of creation Of StorageInbound"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "asnId": {
            "type": "string",
            "description": "PO/Asn for the StorageInbound"
          },
          "shippingPlanId": {
            "type": "number",
            "format": "double",
            "description": "Shipping Plan Id for storageInbound"
          },
          "shipmentId": {
            "type": "number",
            "format": "double",
            "description": "ShipmentId Id for storageInbound"
          },
          "warehouseId": {
            "type": "string",
            "description": "Destination Warehouse Id for the StorageInbound"
          },
          "from": {
            "$ref": "#/components/schemas/DeliverrAddress",
            "description": "Origin address of StorageInbound"
          },
          "to": {
            "$ref": "#/components/schemas/DeliverrAddress",
            "description": "Destination address of StorageInbound"
          },
          "status": {
            "$ref": "#/components/schemas/InboundStatus",
            "description": "Status of the StorageInbound"
          },
          "shipmentType": {
            "$ref": "#/components/schemas/ShipmentType",
            "description": "ShipmentType for storageInbound\nie FLOOR_LOADED_CONTAINED, PALLETIZED"
          },
          "sellerId": {
            "type": "string",
            "description": "sellerId for StorageInbound"
          },
          "shipmentPro": {
            "type": "string"
          },
          "bolLink": {
            "type": "string"
          },
          "estimatedInboundFee": {
            "type": "number",
            "format": "double"
          },
          "chargedInboundFee": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "type": "string"
          },
          "isArchived": {
            "type": "boolean"
          },
          "arrivalExpectedAt": {
            "type": "string",
            "format": "date-time"
          },
          "palletCount": {
            "type": "number",
            "format": "double",
            "description": "PalletCount for StorageInbound required for\nPALLETIZED Inbound"
          },
          "containerId": {
            "type": "string",
            "description": "ContainerId for StorageInbound"
          },
          "containerSize": {
            "$ref": "#/components/schemas/ContainerSize",
            "description": "ContainerSize for storageInbound\nie GENERAL_20FT, GENERAL_40FT"
          },
          "estimatedStorageFee": {
            "type": "number",
            "format": "double"
          },
          "estimatedUnloadingFee": {
            "type": "number",
            "format": "double"
          },
          "shippingPlanName": {
            "type": "string",
            "description": "Shipping plan name for the storage inbound"
          }
        },
        "required": [
          "id",
          "storageItems",
          "createdAt",
          "updatedAt",
          "shippingPlanId",
          "warehouseId",
          "status",
          "shipmentType",
          "sellerId"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "WebookIdType": {
        "type": "string",
        "description": "A unique identifier for a webhook.",
        "pattern": "^\\d+$"
      },
      "WebhookType": {
        "enum": [
          "INBOUNDS_STATUS_UPDATE",
          "INVENTORY_UPDATE",
          "ORDER_STATUS_UPDATE",
          "UNKNOWN"
        ],
        "type": "string"
      },
      "WebhookRequestMethod": {
        "enum": [
          "POST",
          "PUT"
        ],
        "type": "string"
      },
      "WebhookAuthType": {
        "enum": [
          "BASIC_AUTH",
          "TOKEN",
          "NONE"
        ],
        "type": "string"
      },
      "WebhookModel": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/WebhookType",
            "description": "Types of webhooks available. See \"models\" for request details body."
          },
          "url": {
            "type": "string",
            "description": "Webhook URL for where Deliverr events should be sent to. Must begin with 'https://'.",
            "pattern": "^https:\/\/.+"
          },
          "method": {
            "$ref": "#/components/schemas/WebhookRequestMethod"
          },
          "authMethod": {
            "$ref": "#/components/schemas/WebhookAuthType",
            "description": "Types of webhooks available. See \"models\" for request details body.\n<ul>\n<li>NONE: No authentication needed when Deliverr sends webhook events to specified URL</li>\n<li>BASIC_AUTH: Basic authentication (username and password) are needed when Deliverr sends\nwebhook events to specified URL</li>\n<li>TOKEN: A token is sent as the tokenHeader header value when Deliverr sends webhook events to\nspecified URL</li>\n</ul>"
          },
          "username": {
            "type": "string",
            "description": "Required if auth_method is BASIC_AUTH."
          },
          "password": {
            "type": "string",
            "description": "Required if auth_method is BASIC_AUTH."
          },
          "token": {
            "type": "string",
            "description": "Required if auth_method is TOKEN."
          },
          "tokenHeader": {
            "type": "string",
            "description": "Required if auth_method is TOKEN."
          },
          "id": {
            "$ref": "#/components/schemas/WebookIdType"
          }
        },
        "required": [
          "type",
          "url",
          "method",
          "id"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "StatusCodes.CONFLICT": {
        "enum": [
          409
        ],
        "type": "number"
      },
      "ConflictError": {
        "properties": {
          "code": {
            "$ref": "#/components/schemas/StatusCodes.CONFLICT"
          },
          "message": {
            "type": "string",
            "default": "Conflict"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "WebhookCreateModel": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/WebhookType",
            "description": "Types of webhooks available. See \"models\" for request details body."
          },
          "url": {
            "type": "string",
            "description": "Webhook URL for where Deliverr events should be sent to. Must begin with 'https://'.",
            "pattern": "^https:\/\/.+"
          },
          "method": {
            "$ref": "#/components/schemas/WebhookRequestMethod"
          },
          "authMethod": {
            "$ref": "#/components/schemas/WebhookAuthType",
            "description": "Types of webhooks available. See \"models\" for request details body.\n<ul>\n<li>NONE: No authentication needed when Deliverr sends webhook events to specified URL</li>\n<li>BASIC_AUTH: Basic authentication (username and password) are needed when Deliverr sends\nwebhook events to specified URL</li>\n<li>TOKEN: A token is sent as the tokenHeader header value when Deliverr sends webhook events to\nspecified URL</li>\n</ul>"
          },
          "username": {
            "type": "string",
            "description": "Required if auth_method is BASIC_AUTH."
          },
          "password": {
            "type": "string",
            "description": "Required if auth_method is BASIC_AUTH."
          },
          "token": {
            "type": "string",
            "description": "Required if auth_method is TOKEN."
          },
          "tokenHeader": {
            "type": "string",
            "description": "Required if auth_method is TOKEN."
          }
        },
        "required": [
          "type",
          "url",
          "method"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "WebhookMockUpdateType": {
        "enum": [
          "SHIPPED",
          "INVENTORY_AVAILABLE"
        ],
        "type": "string"
      },
      "MockWebhookDetails": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/WebhookType",
            "description": "Types of webhooks available. See \"models\" for request details body."
          },
          "updateType": {
            "$ref": "#/components/schemas/WebhookMockUpdateType",
            "description": "<ol>\n  <li>INVENTORY_AVAILABLE: triggers an INVENTORY_UPDATE webhook with updateType INVENTORY_AVAILABLE.\nType must be INVENTORY_UPDATE and a valid externalProductId must be provided to trigger this webhook.</li>\n  <li>SHIPPED: triggers a ORDER_STATUS_UPDATE webhook with updateType SHIPPED.\nType must be ORDER_STATUS_UPDATE and a valid externalOrderId from a mock order created must be provided.</li>\n</ol>"
          },
          "externalOrderId": {
            "$ref": "#/components/schemas/ExternalOrderIdType"
          },
          "externalProductId": {
            "$ref": "#/components/schemas/ExternalProductIdType"
          }
        },
        "required": [
          "type",
          "updateType"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "WebhookType.ORDER_STATUS_UPDATE": {
        "enum": [
          "ORDER_STATUS_UPDATE"
        ],
        "type": "string"
      },
      "WebhookOrderStatus": {
        "enum": [
          "CREATED",
          "SHIPPED",
          "CANCELLED"
        ],
        "type": "string"
      },
      "OrderStatusWebhookEvent": {
        "properties": {
          "eventTime": {
            "type": "string",
            "format": "date-time",
            "description": "The UTC timestamp of the triggering event."
          },
          "eventId": {
            "type": "string",
            "description": "The globally unique id of this event - can be used for deduplication or idempotency purposes."
          },
          "type": {
            "$ref": "#/components/schemas/WebhookType.ORDER_STATUS_UPDATE",
            "description": "Webhook type."
          },
          "updateType": {
            "$ref": "#/components/schemas/WebhookOrderStatus",
            "description": "Order update types:\n<ol>\n  <li>CREATED: Sent to confirm internal receipt and import of order</li>\n  <li>SHIPPED: Sent when the entire order has shipped and tracking information is available for all items</li>\n  <li>CANCELLED: Sent if an imported order is cancelled</li>\n</ol>"
          },
          "oldStatus": {
            "$ref": "#/components/schemas/WebhookOrderStatus",
            "description": "The previous status of the order."
          },
          "newStatus": {
            "$ref": "#/components/schemas/WebhookOrderStatus",
            "description": "The new status of the order."
          },
          "orderId": {
            "$ref": "#/components/schemas/OrderIdType"
          },
          "shipments": {
            "items": {
              "$ref": "#/components/schemas/OrderShipmentObject"
            },
            "type": "array",
            "description": "\nThe shipment details if the update_type is ORDER_SHIPPED.\nOne shipment is reported per package shipped."
          }
        },
        "required": [
          "eventTime",
          "eventId",
          "type",
          "updateType",
          "newStatus",
          "orderId"
        ],
        "type": "object",
        "additionalProperties": false
      },
      "WebhookType.INVENTORY_UPDATE": {
        "enum": [
          "INVENTORY_UPDATE"
        ],
        "type": "string"
      },
      "InventoryUpdateWebhookEvent": {
        "properties": {
          "eventTime": {
            "type": "string",
            "format": "date-time",
            "description": "The UTC timestamp of the triggering event."
          },
          "eventId": {
            "type": "string",
            "description": "The globally unique id of this event - can be used for deduplication or idempotency purposes."
          },
          "type": {
            "$ref": "#/components/schemas/WebhookType.INVENTORY_UPDATE",
            "description": "Webhook type."
          },
          "productId": {
            "$ref": "#/components/schemas/ProductIdType"
          },
          "externalProductId": {
            "$ref": "#/components/schemas/ExternalProductIdType"
          },
          "inventoryAvailable": {
            "type": "integer",
            "format": "int32",
            "description": "Quantity available for this product"
          }
        },
        "required": [
          "eventTime",
          "eventId",
          "type",
          "productId",
          "externalProductId"
        ],
        "type": "object",
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "OAuth2.0": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://api.deliverr.com/oauth/v1/authorize",
            "tokenUrl": "https://api.deliverr.com/oauth/v1/token",
            "scopes": {
              "api/products": "access to products endpoints",
              "api/orders": "access to orders endpoints",
              "api/returns": "access to returns endpoints",
              "api/parcels": "access to parcel endpoints",
              "api/reports": "access to reports endpoints",
              "api/webhooks": "access to webhooks endpoints",
              "api/parcel-integration": "access to parcel integration endpoints"
            }
          }
        }
      }
    },
    "examples": {},
    "headers": {},
    "parameters": {},
    "requestBodies": {},
    "responses": {}
  },
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local development"
    },
    {
      "url": "https://api.deliverr.com",
      "description": "Production Environment"
    },
    {
      "url": "https://api.staging.deliverr.com",
      "description": "Staging Environment"
    }
  ]
}